begin model

begin molecule types
	A(b,c~u~p)
	X(y,z~u~p)
	T(i,j)
end molecule types

begin species
	A(b,c~u)	100.0
end species

begin reaction rules
	simpleBinding:	A(b!1).X(z~p!1) <-> A(b) + X(z~u)		1.0, 100.0
	selfBinding:	A(b!1,c~p!1) <-> A(b,c~u)		1.0, 1.0
	synthDegComplete:	 <-> A(c~p!1).X(z~u!1)		30.0, 1.0
	synthDegPartial:	A(c~u) <-> A(c~p!1).X(z~u!1)		1.0, 1.0
	underspec:	A(c~p!1).X(y!1) -> A(c~p!1).X(y!1) + X(y,z)		1.0
	unspec:	A() -> A() + X(y,z)		1.0
	unspecTest:	A() + X(y,z) -> 		1.0
	generic:	A(c~u!1).X(z!1) -> A(c~p!1).X(z!1)		5.0
	genericWithState:	A(c~u!1).X(z~p!1) -> A(c~p!1).X(z~p!1)		1.0
	genericWithStateTest:	A(c~p!1).X(z~p!1) -> 		1.0
	simpleSynthesis:	A(b) -> A(b) + X(y,z)		20.0
	unspecifiedStateChange:	A() -> A()		5.0
	injectivity:	A(b) + A(b) + X(y,z) <-> A(b!1).A(b!1) + X(y,z)		2.0, 6.0
	wildcard:	A(c!+) -> A(c!+) + X(y,z)		1.0
	wildcardStateChange:	A(c~p!+) <-> A(c~u!+)		1.0, 2.0
	degUnspecific:	A() -> 		1.0
	concreteSplit:	A(b!1).X(y!1) -> A() + X()		1.0
	underspecSynth:	 -> A()		1.0
end reaction rules

begin observables
	Molecules underspecTest	A(b!?,c~p!1).X(y!1) + X(y,z)
	Molecules genericTest	A(b!?,c~p!1).X(z!1)
	Molecules simpleSynthesisTest	X(y!?,z~u!?)
	Molecules unspecifiedStateChangeTest	A(b!?,c~p!?)
	Molecules wildcardTest	X(y,z)
	Molecules concreteSplitTest	A(b,c) + X(y,z)
	Molecules underspecSynthTest	A(b,c~u)
end observables

end model

#----------------Simulation Details below----------------#

generate_network({overwrite=>1})

simulate({method=>"ssa", t_end=>20, n_steps=>20})