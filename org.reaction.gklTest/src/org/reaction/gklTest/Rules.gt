import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/GKL_created_test/model/GKLModel.ecore"
import "platform:/resource/reactionContainer/model/reactionContainer.ecore"

rule ruleKT_x() {
	k: K {
		++ -K_a -> t
	}

	t: T {
		++ -T_x -> k
	}
}
when ktXUnbound

rule ruleKT_xBwd() {
	k: K {
		-- -K_a -> t
	}

	t: T {
		-- -T_x -> k
	}
}

rule ruleTp_x() {
	k: K {
		-K_a -> t
	}

	t: T {
		-T_x -> k
		-- -T_x_u -> us
		++ -T_x_p -> ps
	}

	us: U_s

	ps: P_s
}

rule ruleKT_y() {
	k: K {
		++ -K_a -> t
	}

	t: T {
		++ -T_y -> k
	}
}
when ktYUnbound

rule ruleKT_yBwd() {
	k: K {
		-- -K_a -> t
	}

	t: T {
		-- -T_y -> k
	}
}

rule ruleTp_y() {
	k: K {
		-K_a -> t
	}

	t: T {
		-T_y -> k
		-- -T_x_u -> us
		++ -T_x_p -> ps
	}

	us: U_s

	ps: P_s
}

rule rulePT_x() {
	p: P {
		++ -P_a -> t
	}

	t: T {
		++ -T_x -> p
	}
}
when ptXUnbound

rule rulePT_xBwd() {
	p: P {
		-- -P_a -> t
	}

	t: T {
		-- -T_x -> p
	}
}

rule ruleTu_x() {
	p: P {
		-P_a -> t
	}

	t: T {
		-T_x -> p
		++ -T_x_u -> us
		-- -T_x_p -> ps
	}

	us: U_s

	ps: P_s
}

rule rulePT_y() {
	p: P {
		++ -P_a -> t
	}

	t: T {
		++ -T_y -> p
	}
}
when ptYUnbound

rule rulePT_yBwd() {
	p: P {
		-- -P_a -> t
	}

	t: T {
		-- -T_y -> p
	}
}

rule ruleTu_y() {
	p: P {
		-P_a -> t
	}

	t: T {
		-T_y -> p
		-- -T_y_u -> us
		++ -T_y_p -> ps
	}

	us: U_s

	ps: P_s
}

condition ktXUnbound = forbid patternk_aBound && forbid patternt_xBound

condition ktYUnbound = forbid patternk_aBound && forbid patternt_yBound

condition ptXUnbound = forbid patternp_aBound && forbid patternt_xBound

condition ptYUnbound = forbid patternp_aBound && forbid patternt_yBound

condition kAUnbound = forbid patternk_aBound

condition pAUnbound = forbid patternp_aBound

condition tXUnbound = forbid patternt_xBound

condition tYUnbound = forbid patternt_yBound

condition tUnbound = forbid patternt_xBound && forbid patternt_yBound

abstract pattern patternk_aBound() {
	k: K {
		-K_a -> a
	}

	a: Agent
}

abstract pattern patternp_aBound() {
	p: P {
		-P_a -> a
	}

	a: Agent
}

abstract pattern patternt_xBound() {
	t: T {
		-T_x -> x
	}

	x: Agent
}

abstract pattern patternt_yBound() {
	t: T {
		-T_y -> y
	}

	y: Agent
}
