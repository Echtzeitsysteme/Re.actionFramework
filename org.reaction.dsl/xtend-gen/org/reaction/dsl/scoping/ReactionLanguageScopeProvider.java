/**
 * generated by Xtext 2.19.0
 */
package org.reaction.dsl.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.reaction.dsl.reactionLanguage.AbstractAgent;
import org.reaction.dsl.reactionLanguage.Agent;
import org.reaction.dsl.reactionLanguage.AgentInstance;
import org.reaction.dsl.reactionLanguage.BondSide;
import org.reaction.dsl.reactionLanguage.Complex;
import org.reaction.dsl.reactionLanguage.ComplexElement;
import org.reaction.dsl.reactionLanguage.Component;
import org.reaction.dsl.reactionLanguage.InitialisationBody;
import org.reaction.dsl.reactionLanguage.ObservablePattern;
import org.reaction.dsl.reactionLanguage.ReactionLanguagePackage;
import org.reaction.dsl.reactionLanguage.ReactionModel;
import org.reaction.dsl.reactionLanguage.Rule;
import org.reaction.dsl.reactionLanguage.Signature;
import org.reaction.dsl.reactionLanguage.Site;
import org.reaction.dsl.reactionLanguage.SiteInstance;
import org.reaction.dsl.reactionLanguage.SiteInstanceState;
import org.reaction.dsl.reactionLanguage.SiteState;
import org.reaction.dsl.reactionLanguage.TerminateCount;
import org.reaction.dsl.reactionLanguage.VarRef;
import org.reaction.dsl.reactionLanguage.Variable;
import org.reaction.dsl.scoping.AbstractReactionLanguageScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ReactionLanguageScopeProvider extends AbstractReactionLanguageScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof AgentInstance) && Objects.equal(reference, ReactionLanguagePackage.Literals.AGENT_INSTANCE__INSTANCE_OF))) {
      return this.getScope_AgentInstance_AgentInstanceInstanceOf(((AgentInstance) context));
    }
    if (((context instanceof SiteInstance) && Objects.equal(reference, ReactionLanguagePackage.Literals.SITE_INSTANCE__SITE))) {
      return this.getScope_SiteInstance_SiteInstanceSite(((SiteInstance) context));
    }
    if (((context instanceof SiteInstanceState) && Objects.equal(reference, ReactionLanguagePackage.Literals.SITE_INSTANCE_STATE__STATE))) {
      return this.getScope_SiteInstanceState_SiteInstanceStateState(((SiteInstanceState) context));
    }
    if (((context instanceof BondSide) && Objects.equal(reference, ReactionLanguagePackage.Literals.BOND_SIDE__ABSTRACT_AGENT))) {
      return this.getScope_BondSide_BondSideAbstractAgent(((BondSide) context));
    }
    if (((context instanceof VarRef) && Objects.equal(reference, ReactionLanguagePackage.Literals.VAR_REF__REF))) {
      return this.getScope_VarRef_VarRefRef(((VarRef) context));
    }
    return super.getScope(context, reference);
  }
  
  private IScope getScope_AgentInstance_AgentInstanceInstanceOf(final AgentInstance context) {
    final EObject root = EcoreUtil2.getRootContainer(context);
    final List<Agent> allAgents = EcoreUtil2.<Agent>getAllContentsOfType(root, Agent.class);
    return Scopes.scopeFor(allAgents);
  }
  
  private IScope getScope_VarRef_VarRefRef(final VarRef context) {
    ArrayList<Variable> candidates = new ArrayList<Variable>();
    EObject containerTraverser = context.eContainer();
    while ((!(containerTraverser instanceof ReactionModel))) {
      {
        if ((containerTraverser instanceof Complex)) {
          final Complex complex = ((Complex) containerTraverser);
          final EList<ComplexElement> elements = complex.getElements();
          final Iterable<Variable> vars = Iterables.<Variable>filter(elements, Variable.class);
          Iterables.<Variable>addAll(candidates, vars);
        }
        containerTraverser = containerTraverser.eContainer();
      }
    }
    if ((containerTraverser instanceof ReactionModel)) {
      final ReactionModel ReactionModel = ((org.reaction.dsl.reactionLanguage.ReactionModel) containerTraverser);
      final EList<Component> elements = ReactionModel.getElements();
      final Iterable<Variable> vars = Iterables.<Variable>filter(elements, Variable.class);
      Iterables.<Variable>addAll(candidates, vars);
    }
    return Scopes.scopeFor(candidates);
  }
  
  private IScope getScope_BondSide_BondSideAbstractAgent(final BondSide context) {
    Signature signature = ((Signature) null);
    EObject containerTraverser = context.eContainer();
    ArrayList<AbstractAgent> candidates = new ArrayList<AbstractAgent>();
    while ((!(containerTraverser instanceof ReactionModel))) {
      {
        containerTraverser = containerTraverser.eContainer();
        if ((containerTraverser instanceof Rule)) {
          signature = ((Rule)containerTraverser).getHead().getSignature();
        }
        if ((containerTraverser instanceof Complex)) {
          signature = ((Complex)containerTraverser).getSignature();
        }
        if ((containerTraverser instanceof InitialisationBody)) {
          signature = ((InitialisationBody)containerTraverser).getSignature();
        }
        if ((containerTraverser instanceof ObservablePattern)) {
          signature = ((ObservablePattern)containerTraverser).getSignature();
        }
        if ((containerTraverser instanceof TerminateCount)) {
          signature = ((TerminateCount)containerTraverser).getSignature();
        }
        if ((signature != null)) {
          candidates.addAll(signature.getInstances());
        }
      }
    }
    final EObject root = EcoreUtil2.getRootContainer(context);
    final List<Agent> agents = EcoreUtil2.<Agent>getAllContentsOfType(root, Agent.class);
    candidates.addAll(agents);
    return Scopes.scopeFor(candidates);
  }
  
  private IScope getScope_SiteInstance_SiteInstanceSite(final SiteInstance context) {
    final EObject bondSide = context.eContainer();
    if ((bondSide == null)) {
      return IScope.NULLSCOPE;
    }
    if ((bondSide instanceof BondSide)) {
      EObject _eContainer = context.eContainer();
      final BondSide rightBondSide = ((BondSide) _eContainer);
      if ((rightBondSide != null)) {
        final AbstractAgent abstractAgent = rightBondSide.getAbstractAgent();
        if ((abstractAgent != null)) {
          if ((abstractAgent instanceof Agent)) {
            final EList<Site> sites = ((Agent) abstractAgent).getSites();
            return Scopes.scopeFor(sites);
          }
          if ((abstractAgent instanceof AgentInstance)) {
            final AgentInstance aInstance = ((AgentInstance)abstractAgent);
            Agent _instanceOf = aInstance.getInstanceOf();
            boolean _tripleNotEquals = (_instanceOf != null);
            if (_tripleNotEquals) {
              final EList<Site> sites_1 = aInstance.getInstanceOf().getSites();
              return Scopes.scopeFor(sites_1);
            }
          }
          return IScope.NULLSCOPE;
        }
      }
    }
    return IScope.NULLSCOPE;
  }
  
  private IScope getScope_SiteInstanceState_SiteInstanceStateState(final SiteInstanceState context) {
    EObject _eContainer = context.eContainer();
    final Site site = ((SiteInstance) _eContainer).getSite();
    final EList<SiteState> states = site.getStates();
    return Scopes.scopeFor(states);
  }
  
  private <T extends EObject> ArrayList<AgentInstance> getScope_SignatureRelevant(final T context) {
    Signature signature = ((Signature) null);
    EObject containerTraverser = context.eContainer();
    ArrayList<AgentInstance> candidates = new ArrayList<AgentInstance>();
    while ((!(containerTraverser instanceof ReactionModel))) {
      {
        containerTraverser = containerTraverser.eContainer();
        if ((containerTraverser instanceof Rule)) {
          signature = ((Rule)containerTraverser).getHead().getSignature();
        }
        if ((containerTraverser instanceof Complex)) {
          signature = ((Complex)containerTraverser).getSignature();
        }
        if ((containerTraverser instanceof InitialisationBody)) {
          signature = ((InitialisationBody)containerTraverser).getSignature();
        }
        if ((containerTraverser instanceof ObservablePattern)) {
          signature = ((ObservablePattern)containerTraverser).getSignature();
        }
        if ((containerTraverser instanceof TerminateCount)) {
          signature = ((TerminateCount)containerTraverser).getSignature();
        }
        if ((signature != null)) {
          candidates.addAll(signature.getInstances());
        }
      }
    }
    return candidates;
  }
}
