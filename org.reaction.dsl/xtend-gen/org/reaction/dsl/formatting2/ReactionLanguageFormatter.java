/**
 * generated by Xtext 2.20.0
 */
package org.reaction.dsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.reaction.dsl.reactionLanguage.Agent;
import org.reaction.dsl.reactionLanguage.AgentDeclaration;
import org.reaction.dsl.reactionLanguage.AgentInstance;
import org.reaction.dsl.reactionLanguage.ArithmeticExpr;
import org.reaction.dsl.reactionLanguage.BlankPattern;
import org.reaction.dsl.reactionLanguage.Bond;
import org.reaction.dsl.reactionLanguage.BondSide;
import org.reaction.dsl.reactionLanguage.BondSideOrWildcard;
import org.reaction.dsl.reactionLanguage.Bonds;
import org.reaction.dsl.reactionLanguage.Complex;
import org.reaction.dsl.reactionLanguage.ComplexElement;
import org.reaction.dsl.reactionLanguage.Component;
import org.reaction.dsl.reactionLanguage.Div;
import org.reaction.dsl.reactionLanguage.FunctionCall;
import org.reaction.dsl.reactionLanguage.Initialisation;
import org.reaction.dsl.reactionLanguage.InitialisationBody;
import org.reaction.dsl.reactionLanguage.InitialisationHead;
import org.reaction.dsl.reactionLanguage.Minus;
import org.reaction.dsl.reactionLanguage.Multi;
import org.reaction.dsl.reactionLanguage.Observable;
import org.reaction.dsl.reactionLanguage.ObservableBody;
import org.reaction.dsl.reactionLanguage.ObservablePattern;
import org.reaction.dsl.reactionLanguage.Pattern;
import org.reaction.dsl.reactionLanguage.Plus;
import org.reaction.dsl.reactionLanguage.Pow;
import org.reaction.dsl.reactionLanguage.Rates;
import org.reaction.dsl.reactionLanguage.ReactionLanguagePackage;
import org.reaction.dsl.reactionLanguage.ReactionModel;
import org.reaction.dsl.reactionLanguage.Rule;
import org.reaction.dsl.reactionLanguage.RuleBody;
import org.reaction.dsl.reactionLanguage.RuleHead;
import org.reaction.dsl.reactionLanguage.Signature;
import org.reaction.dsl.reactionLanguage.Site;
import org.reaction.dsl.reactionLanguage.SiteInstance;
import org.reaction.dsl.reactionLanguage.SiteInstanceState;
import org.reaction.dsl.reactionLanguage.SiteState;
import org.reaction.dsl.reactionLanguage.TerminateCount;
import org.reaction.dsl.reactionLanguage.TerminateIterations;
import org.reaction.dsl.reactionLanguage.TerminateTime;
import org.reaction.dsl.reactionLanguage.Variable;
import org.reaction.dsl.services.ReactionLanguageGrammarAccess;

@SuppressWarnings("all")
public class ReactionLanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ReactionLanguageGrammarAccess _reactionLanguageGrammarAccess;
  
  protected void _format(final ReactionModel reactionModel, @Extension final IFormattableDocument document) {
    EList<Component> _elements = reactionModel.getElements();
    for (final Component component : _elements) {
      document.<Component>format(component);
    }
  }
  
  protected void _format(final Agent agent, @Extension final IFormattableDocument document) {
    EList<Site> _sites = agent.getSites();
    boolean _tripleNotEquals = (_sites != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(this.textRegionExtensions.regionFor(agent).keyword(this._reactionLanguageGrammarAccess.getAgentAccess().getColonKeyword_1_0()), _function);
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(this.textRegionExtensions.regionFor(agent).keyword(this._reactionLanguageGrammarAccess.getAgentAccess().getCommaKeyword_1_2_0()), _function_1);
    }
    EList<Site> _sites_1 = agent.getSites();
    for (final Site site : _sites_1) {
      document.<Site>format(site);
    }
  }
  
  protected void _format(final AgentDeclaration decl, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(decl).keyword(this._reactionLanguageGrammarAccess.getAgentDeclarationAccess().getAgentKeyword_0()), _function);
    int _size = decl.getDeclaredAgents().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(this.textRegionExtensions.regionFor(decl).keyword(this._reactionLanguageGrammarAccess.getAgentDeclarationAccess().getSemicolonKeyword_2_0()), _function_1);
    }
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(decl).feature(ReactionLanguagePackage.Literals.AGENT_DECLARATION__DECLARED_AGENTS), _function_2);
    EList<Agent> _declaredAgents = decl.getDeclaredAgents();
    for (final Agent agent : _declaredAgents) {
      document.<Agent>format(agent);
    }
  }
  
  protected void _format(final Site site, @Extension final IFormattableDocument document) {
    EList<SiteState> _states = site.getStates();
    boolean _tripleNotEquals = (_states != null);
    if (_tripleNotEquals) {
      int _size = site.getStates().size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.append(this.textRegionExtensions.regionFor(site).keyword(this._reactionLanguageGrammarAccess.getSiteAccess().getCommaKeyword_1_2_0()), _function);
      }
      EList<SiteState> _states_1 = site.getStates();
      for (final SiteState state : _states_1) {
        document.<SiteState>format(state);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(site).keyword(this._reactionLanguageGrammarAccess.getSiteAccess().getCommaKeyword_1_2_0()), _function_1);
  }
  
  protected void _format(final Complex complex, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(complex).keyword(this._reactionLanguageGrammarAccess.getComplexAccess().getComplexKeyword_0()), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(complex).keyword(this._reactionLanguageGrammarAccess.getComplexAccess().getLeftCurlyBracketKeyword_2()), _function_1);
    document.<Signature>format(complex.getSignature());
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Complex>interior(complex, _function_2);
    EList<ComplexElement> _elements = complex.getElements();
    for (final ComplexElement cElem : _elements) {
      document.<ComplexElement>format(cElem);
    }
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(complex).keyword(this._reactionLanguageGrammarAccess.getComplexAccess().getRightCurlyBracketKeyword_4()), _function_3);
  }
  
  protected void _format(final Signature sig, @Extension final IFormattableDocument document) {
    int _size = sig.getInstances().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(this.textRegionExtensions.regionFor(sig).keyword(this._reactionLanguageGrammarAccess.getSignatureAccess().getCommaKeyword_2_0()), _function);
    }
    EList<AgentInstance> _instances = sig.getInstances();
    for (final AgentInstance ai : _instances) {
      document.<AgentInstance>format(ai);
    }
  }
  
  protected void _format(final AgentInstance ai, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(ai).keyword(this._reactionLanguageGrammarAccess.getAgentInstanceAccess().getColonKeyword_1()), _function);
  }
  
  protected void _format(final Rule rule, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(rule).keyword(this._reactionLanguageGrammarAccess.getRuleAccess().getRuleKeyword_0()), _function);
    document.<RuleHead>format(rule.getHead());
    document.<RuleBody>format(rule.getBody());
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(rule).feature(ReactionLanguagePackage.Literals.RULE__BODY), _function_1);
  }
  
  protected void _format(final RuleHead rHead, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(rHead).feature(ReactionLanguagePackage.Literals.RULE_HEAD__NAME), _function);
    Signature _signature = rHead.getSignature();
    boolean _tripleNotEquals = (_signature != null);
    if (_tripleNotEquals) {
      document.<Signature>format(rHead.getSignature());
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(this.textRegionExtensions.regionFor(rHead).feature(ReactionLanguagePackage.Literals.RULE_HEAD__SIGNATURE), _function_1);
    }
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(rHead).keyword(this._reactionLanguageGrammarAccess.getRuleHeadAccess().getColonKeyword_2()), _function_2);
  }
  
  protected void _format(final RuleBody rBody, @Extension final IFormattableDocument document) {
    final Pattern lhs = rBody.getLhs();
    final Pattern rhs = rBody.getRhs();
    if ((!(lhs instanceof BlankPattern))) {
      document.<Pattern>format(lhs);
    }
    if ((!(rhs instanceof BlankPattern))) {
      document.<Pattern>format(rhs);
    }
    document.<Rates>format(rBody.getRates());
  }
  
  protected void _format(final Rates rates, @Extension final IFormattableDocument document) {
    boolean _isRateBackwardSet = rates.isRateBackwardSet();
    if (_isRateBackwardSet) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(this.textRegionExtensions.regionFor(rates).feature(ReactionLanguagePackage.Literals.RATES__RATE_BACKWARD_SET), _function);
    }
  }
  
  protected void _format(final Bonds bonds, @Extension final IFormattableDocument document) {
    int _size = bonds.getBonds().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(this.textRegionExtensions.regionFor(bonds).keyword(this._reactionLanguageGrammarAccess.getBondsAccess().getCommaKeyword_1_0()), _function);
    }
  }
  
  protected void _format(final Bond bond, @Extension final IFormattableDocument document) {
    document.<BondSide>format(bond.getLeft());
    BondSideOrWildcard _right = bond.getRight();
    boolean _tripleNotEquals = (_right != null);
    if (_tripleNotEquals) {
      document.<BondSideOrWildcard>format(bond.getRight());
    }
  }
  
  protected void _format(final BondSideOrWildcard bondOrWild, @Extension final IFormattableDocument document) {
    if ((bondOrWild instanceof BondSide)) {
      document.<BondSide>format(((BondSide) bondOrWild));
    }
  }
  
  protected void _format(final BondSide bSide, @Extension final IFormattableDocument document) {
    SiteInstance _siteInstance = bSide.getSiteInstance();
    boolean _tripleNotEquals = (_siteInstance != null);
    if (_tripleNotEquals) {
      document.<SiteInstance>format(bSide.getSiteInstance());
    }
  }
  
  protected void _format(final SiteInstance si, @Extension final IFormattableDocument document) {
    SiteInstanceState _siteState = si.getSiteState();
    boolean _tripleNotEquals = (_siteState != null);
    if (_tripleNotEquals) {
      document.<SiteInstanceState>format(si.getSiteState());
    }
  }
  
  protected void _format(final Variable variable, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(variable).keyword(this._reactionLanguageGrammarAccess.getVariableAccess().getEqualsSignKeyword_2()), _function);
    document.<ArithmeticExpr>format(variable.getValue());
  }
  
  protected void _format(final Initialisation init, @Extension final IFormattableDocument document) {
    document.<InitialisationHead>format(init.getHead());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<InitialisationBody>append(document.<InitialisationBody>format(init.getBody()), _function);
  }
  
  protected void _format(final InitialisationHead iHead, @Extension final IFormattableDocument document) {
    document.<ArithmeticExpr>format(iHead.getCnt());
  }
  
  protected void _format(final InitialisationBody iBody, @Extension final IFormattableDocument document) {
    Signature _signature = iBody.getSignature();
    boolean _tripleNotEquals = (_signature != null);
    if (_tripleNotEquals) {
      document.<Signature>format(iBody.getSignature());
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(iBody).keyword(this._reactionLanguageGrammarAccess.getInitialisationBodyAccess().getColonKeyword_1()), _function);
    document.<Pattern>format(iBody.getPattern());
  }
  
  protected void _format(final Observable obs, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(obs).keyword(this._reactionLanguageGrammarAccess.getObservableAccess().getObserveKeyword_0()), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(obs).feature(ReactionLanguagePackage.Literals.OBSERVABLE__NAME), _function_1);
    document.<ObservableBody>format(obs.getBody());
  }
  
  protected void _format(final ObservablePattern oBody, @Extension final IFormattableDocument document) {
    Signature _signature = oBody.getSignature();
    boolean _tripleNotEquals = (_signature != null);
    if (_tripleNotEquals) {
      document.<Signature>format(oBody.getSignature());
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(oBody).keyword(this._reactionLanguageGrammarAccess.getObservablePatternAccess().getColonKeyword_1()), _function);
    document.<Pattern>format(oBody.getPattern());
  }
  
  protected void _format(final TerminateTime tTime, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(tTime).keyword(this._reactionLanguageGrammarAccess.getTerminateTimeAccess().getEqualsSignKeyword_1()), _function);
    document.<ArithmeticExpr>format(tTime.getTime());
  }
  
  protected void _format(final TerminateIterations tIterations, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(tIterations).keyword(this._reactionLanguageGrammarAccess.getTerminateIterationsAccess().getEqualsSignKeyword_1()), _function);
    document.<ArithmeticExpr>format(tIterations.getIterations());
  }
  
  protected void _format(final TerminateCount tCount, @Extension final IFormattableDocument document) {
    Signature _signature = tCount.getSignature();
    boolean _tripleNotEquals = (_signature != null);
    if (_tripleNotEquals) {
      document.<Signature>format(tCount.getSignature());
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(this.textRegionExtensions.regionFor(tCount).keyword(this._reactionLanguageGrammarAccess.getTerminateCountAccess().getColonKeyword_0_1()), _function);
    }
    document.<Pattern>format(tCount.getPattern());
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(tCount).keyword(this._reactionLanguageGrammarAccess.getTerminateCountAccess().getEqualsSignKeyword_3()), _function_1);
    document.<ArithmeticExpr>format(tCount.getCnt());
  }
  
  protected void _format(final FunctionCall fc, @Extension final IFormattableDocument document) {
    document.<ArithmeticExpr>format(fc.getExpr());
  }
  
  protected void _format(final Plus plus, @Extension final IFormattableDocument document) {
    document.<ArithmeticExpr>format(plus.getLeft());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(plus).keyword(this._reactionLanguageGrammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()), _function);
    document.<ArithmeticExpr>format(plus.getRight());
  }
  
  protected void _format(final Minus minus, @Extension final IFormattableDocument document) {
    document.<ArithmeticExpr>format(minus.getLeft());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(minus).keyword(this._reactionLanguageGrammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()), _function);
    document.<ArithmeticExpr>format(minus.getRight());
  }
  
  protected void _format(final Multi mul, @Extension final IFormattableDocument document) {
    document.<ArithmeticExpr>format(mul.getLeft());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(mul).keyword(this._reactionLanguageGrammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()), _function);
    document.<ArithmeticExpr>format(mul.getRight());
  }
  
  protected void _format(final Div div, @Extension final IFormattableDocument document) {
    document.<ArithmeticExpr>format(div.getLeft());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(div).keyword(this._reactionLanguageGrammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()), _function);
    document.<ArithmeticExpr>format(div.getRight());
  }
  
  protected void _format(final Pow pow, @Extension final IFormattableDocument document) {
    document.<ArithmeticExpr>format(pow.getLeft());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(pow).keyword(this._reactionLanguageGrammarAccess.getMultiplicationAccess().getCircumflexAccentKeyword_1_0_2_1()), _function);
    document.<ArithmeticExpr>format(pow.getRight());
  }
  
  private int maxRuleHeadLength(final Complex complex) {
    int maxLength = 0;
    EList<ComplexElement> _elements = complex.getElements();
    for (final ComplexElement cElem : _elements) {
      if ((cElem instanceof Rule)) {
        final RuleHead rHead = ((Rule) cElem).getHead();
        final int rHeadLength = this.textRegionExtensions.regionForEObject(rHead).getLength();
        if ((rHeadLength > maxLength)) {
          maxLength = rHeadLength;
        }
      }
    }
    return maxLength;
  }
  
  public void format(final Object tCount, final IFormattableDocument document) {
    if (tCount instanceof TerminateCount) {
      _format((TerminateCount)tCount, document);
      return;
    } else if (tCount instanceof TerminateIterations) {
      _format((TerminateIterations)tCount, document);
      return;
    } else if (tCount instanceof TerminateTime) {
      _format((TerminateTime)tCount, document);
      return;
    } else if (tCount instanceof XtextResource) {
      _format((XtextResource)tCount, document);
      return;
    } else if (tCount instanceof Agent) {
      _format((Agent)tCount, document);
      return;
    } else if (tCount instanceof AgentDeclaration) {
      _format((AgentDeclaration)tCount, document);
      return;
    } else if (tCount instanceof AgentInstance) {
      _format((AgentInstance)tCount, document);
      return;
    } else if (tCount instanceof BondSide) {
      _format((BondSide)tCount, document);
      return;
    } else if (tCount instanceof Bonds) {
      _format((Bonds)tCount, document);
      return;
    } else if (tCount instanceof Complex) {
      _format((Complex)tCount, document);
      return;
    } else if (tCount instanceof Div) {
      _format((Div)tCount, document);
      return;
    } else if (tCount instanceof FunctionCall) {
      _format((FunctionCall)tCount, document);
      return;
    } else if (tCount instanceof Initialisation) {
      _format((Initialisation)tCount, document);
      return;
    } else if (tCount instanceof Minus) {
      _format((Minus)tCount, document);
      return;
    } else if (tCount instanceof Multi) {
      _format((Multi)tCount, document);
      return;
    } else if (tCount instanceof Observable) {
      _format((Observable)tCount, document);
      return;
    } else if (tCount instanceof ObservablePattern) {
      _format((ObservablePattern)tCount, document);
      return;
    } else if (tCount instanceof Plus) {
      _format((Plus)tCount, document);
      return;
    } else if (tCount instanceof Pow) {
      _format((Pow)tCount, document);
      return;
    } else if (tCount instanceof Rule) {
      _format((Rule)tCount, document);
      return;
    } else if (tCount instanceof Variable) {
      _format((Variable)tCount, document);
      return;
    } else if (tCount instanceof Bond) {
      _format((Bond)tCount, document);
      return;
    } else if (tCount instanceof BondSideOrWildcard) {
      _format((BondSideOrWildcard)tCount, document);
      return;
    } else if (tCount instanceof InitialisationBody) {
      _format((InitialisationBody)tCount, document);
      return;
    } else if (tCount instanceof InitialisationHead) {
      _format((InitialisationHead)tCount, document);
      return;
    } else if (tCount instanceof Rates) {
      _format((Rates)tCount, document);
      return;
    } else if (tCount instanceof ReactionModel) {
      _format((ReactionModel)tCount, document);
      return;
    } else if (tCount instanceof RuleBody) {
      _format((RuleBody)tCount, document);
      return;
    } else if (tCount instanceof RuleHead) {
      _format((RuleHead)tCount, document);
      return;
    } else if (tCount instanceof Signature) {
      _format((Signature)tCount, document);
      return;
    } else if (tCount instanceof Site) {
      _format((Site)tCount, document);
      return;
    } else if (tCount instanceof SiteInstance) {
      _format((SiteInstance)tCount, document);
      return;
    } else if (tCount instanceof EObject) {
      _format((EObject)tCount, document);
      return;
    } else if (tCount == null) {
      _format((Void)null, document);
      return;
    } else if (tCount != null) {
      _format(tCount, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(tCount, document).toString());
    }
  }
}
