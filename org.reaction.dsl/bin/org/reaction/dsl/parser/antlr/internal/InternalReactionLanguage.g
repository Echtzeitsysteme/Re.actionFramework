/*
 * generated by Xtext 2.20.0
 */
grammar InternalReactionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.reaction.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.reaction.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.reaction.dsl.services.ReactionLanguageGrammarAccess;

}

@parser::members {

 	private ReactionLanguageGrammarAccess grammarAccess;

    public InternalReactionLanguageParser(TokenStream input, ReactionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ReactionModel";
   	}

   	@Override
   	protected ReactionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleReactionModel
entryRuleReactionModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionModelRule()); }
	iv_ruleReactionModel=ruleReactionModel
	{ $current=$iv_ruleReactionModel.current; }
	EOF;

// Rule ReactionModel
ruleReactionModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionModelAccess().getElementsComponentParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleComponent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"org.reaction.dsl.ReactionLanguage.Component");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_SL_COMMENT_1=RULE_SL_COMMENT
			{
				newLeafNode(this_SL_COMMENT_1, grammarAccess.getReactionModelAccess().getSL_COMMENTTerminalRuleCall_1());
			}
		)?
		(
			this_NEWLINE_2=RULE_NEWLINE
			{
				newLeafNode(this_NEWLINE_2, grammarAccess.getReactionModelAccess().getNEWLINETerminalRuleCall_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReactionModelAccess().getElementsComponentParserRuleCall_2_1_0());
					}
					lv_elements_3_0=ruleComponent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactionModelRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"org.reaction.dsl.ReactionLanguage.Component");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)*
;

// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	iv_ruleComponent=ruleComponent
	{ $current=$iv_ruleComponent.current; }
	EOF;

// Rule Component
ruleComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComponentAccess().getAgentDeclarationParserRuleCall_0());
		}
		this_AgentDeclaration_0=ruleAgentDeclaration
		{
			$current = $this_AgentDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentAccess().getRuleParserRuleCall_1());
		}
		this_Rule_1=ruleRule
		{
			$current = $this_Rule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentAccess().getComplexParserRuleCall_2());
		}
		this_Complex_2=ruleComplex
		{
			$current = $this_Complex_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentAccess().getInitialisationParserRuleCall_3());
		}
		this_Initialisation_3=ruleInitialisation
		{
			$current = $this_Initialisation_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentAccess().getObservableParserRuleCall_4());
		}
		this_Observable_4=ruleObservable
		{
			$current = $this_Observable_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentAccess().getVariableParserRuleCall_5());
		}
		this_Variable_5=ruleVariable
		{
			$current = $this_Variable_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComponentAccess().getCommandParserRuleCall_6());
		}
		this_Command_6=ruleCommand
		{
			$current = $this_Command_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentRule()); }
	iv_ruleAgent=ruleAgent
	{ $current=$iv_ruleAgent.current; }
	EOF;

// Rule Agent
ruleAgent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getAgentAccess().getColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAgentAccess().getSitesSiteParserRuleCall_1_1_0());
					}
					lv_sites_2_0=ruleSite
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAgentRule());
						}
						add(
							$current,
							"sites",
							lv_sites_2_0,
							"org.reaction.dsl.ReactionLanguage.Site");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAgentAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAgentAccess().getSitesSiteParserRuleCall_1_2_1_0());
						}
						lv_sites_4_0=ruleSite
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAgentRule());
							}
							add(
								$current,
								"sites",
								lv_sites_4_0,
								"org.reaction.dsl.ReactionLanguage.Site");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleAgentDeclaration
entryRuleAgentDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentDeclarationRule()); }
	iv_ruleAgentDeclaration=ruleAgentDeclaration
	{ $current=$iv_ruleAgentDeclaration.current; }
	EOF;

// Rule AgentDeclaration
ruleAgentDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='agent'
		{
			newLeafNode(otherlv_0, grammarAccess.getAgentDeclarationAccess().getAgentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentDeclarationAccess().getDeclaredAgentsAgentParserRuleCall_1_0());
				}
				lv_declaredAgents_1_0=ruleAgent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentDeclarationRule());
					}
					add(
						$current,
						"declaredAgents",
						lv_declaredAgents_1_0,
						"org.reaction.dsl.ReactionLanguage.Agent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getAgentDeclarationAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAgentDeclarationAccess().getDeclaredAgentsAgentParserRuleCall_2_1_0());
					}
					lv_declaredAgents_3_0=ruleAgent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAgentDeclarationRule());
						}
						add(
							$current,
							"declaredAgents",
							lv_declaredAgents_3_0,
							"org.reaction.dsl.ReactionLanguage.Agent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAgentInstance
entryRuleAgentInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentInstanceRule()); }
	iv_ruleAgentInstance=ruleAgentInstance
	{ $current=$iv_ruleAgentInstance.current; }
	EOF;

// Rule AgentInstance
ruleAgentInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAgentInstanceAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentInstanceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAgentInstanceAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentInstanceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAgentInstanceAccess().getInstanceOfAgentCrossReference_2_0());
				}
			)
		)
		(
			(
				(
					lv_array_3_0='['
					{
						newLeafNode(lv_array_3_0, grammarAccess.getAgentInstanceAccess().getArrayLeftSquareBracketKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAgentInstanceRule());
						}
						setWithLastConsumed($current, "array", true, "[");
					}
				)
			)
			(
				(
					lv_size_4_0=RULE_INT
					{
						newLeafNode(lv_size_4_0, grammarAccess.getAgentInstanceAccess().getSizeINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAgentInstanceRule());
						}
						setWithLastConsumed(
							$current,
							"size",
							lv_size_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getAgentInstanceAccess().getRightSquareBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleSite
entryRuleSite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSiteRule()); }
	iv_ruleSite=ruleSite
	{ $current=$iv_ruleSite.current; }
	EOF;

// Rule Site
ruleSite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSiteAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSiteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getSiteAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSiteAccess().getStatesSiteStateParserRuleCall_1_1_0());
					}
					lv_states_2_0=ruleSiteState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSiteRule());
						}
						add(
							$current,
							"states",
							lv_states_2_0,
							"org.reaction.dsl.ReactionLanguage.SiteState");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSiteAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSiteAccess().getStatesSiteStateParserRuleCall_1_2_1_0());
						}
						lv_states_4_0=ruleSiteState
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSiteRule());
							}
							add(
								$current,
								"states",
								lv_states_4_0,
								"org.reaction.dsl.ReactionLanguage.SiteState");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSiteAccess().getRightParenthesisKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleSiteState
entryRuleSiteState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSiteStateRule()); }
	iv_ruleSiteState=ruleSiteState
	{ $current=$iv_ruleSiteState.current; }
	EOF;

// Rule SiteState
ruleSiteState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSiteStateAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSiteStateRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleComplex
entryRuleComplex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexRule()); }
	iv_ruleComplex=ruleComplex
	{ $current=$iv_ruleComplex.current; }
	EOF;

// Rule Complex
ruleComplex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='complex'
		{
			newLeafNode(otherlv_0, grammarAccess.getComplexAccess().getComplexKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexAccess().getSignatureSignatureParserRuleCall_1_0());
				}
				lv_signature_1_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexRule());
					}
					set(
						$current,
						"signature",
						lv_signature_1_0,
						"org.reaction.dsl.ReactionLanguage.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getComplexAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexAccess().getElementsComplexElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleComplexElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"org.reaction.dsl.ReactionLanguage.ComplexElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getComplexAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleComplexElement
entryRuleComplexElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexElementRule()); }
	iv_ruleComplexElement=ruleComplexElement
	{ $current=$iv_ruleComplexElement.current; }
	EOF;

// Rule ComplexElement
ruleComplexElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComplexElementAccess().getComplexParserRuleCall_0());
		}
		this_Complex_0=ruleComplex
		{
			$current = $this_Complex_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComplexElementAccess().getRuleParserRuleCall_1());
		}
		this_Rule_1=ruleRule
		{
			$current = $this_Rule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComplexElementAccess().getVariableParserRuleCall_2());
		}
		this_Variable_2=ruleVariable
		{
			$current = $this_Variable_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComplexElementAccess().getObservableParserRuleCall_3());
		}
		this_Observable_3=ruleObservable
		{
			$current = $this_Observable_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSignature
entryRuleSignature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_ruleSignature=ruleSignature
	{ $current=$iv_ruleSignature.current; }
	EOF;

// Rule Signature
ruleSignature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSignatureAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureAccess().getInstancesAgentInstanceParserRuleCall_1_0());
				}
				lv_instances_1_0=ruleAgentInstance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureRule());
					}
					add(
						$current,
						"instances",
						lv_instances_1_0,
						"org.reaction.dsl.ReactionLanguage.AgentInstance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSignatureAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignatureAccess().getInstancesAgentInstanceParserRuleCall_2_1_0());
					}
					lv_instances_3_0=ruleAgentInstance
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignatureRule());
						}
						add(
							$current,
							"instances",
							lv_instances_3_0,
							"org.reaction.dsl.ReactionLanguage.AgentInstance");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSignatureAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getHeadRuleHeadParserRuleCall_1_0());
				}
				lv_head_1_0=ruleRuleHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"head",
						lv_head_1_0,
						"org.reaction.dsl.ReactionLanguage.RuleHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getBodyRuleBodyParserRuleCall_2_0());
				}
				lv_body_2_0=ruleRuleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.reaction.dsl.ReactionLanguage.RuleBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRuleHead
entryRuleRuleHead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleHeadRule()); }
	iv_ruleRuleHead=ruleRuleHead
	{ $current=$iv_ruleRuleHead.current; }
	EOF;

// Rule RuleHead
ruleRuleHead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRuleHeadAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleHeadRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleHeadAccess().getSignatureSignatureParserRuleCall_1_0());
				}
				lv_signature_1_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleHeadRule());
					}
					set(
						$current,
						"signature",
						lv_signature_1_0,
						"org.reaction.dsl.ReactionLanguage.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleHeadAccess().getColonKeyword_2());
		}
	)
;

// Entry rule entryRuleRuleBody
entryRuleRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleBodyRule()); }
	iv_ruleRuleBody=ruleRuleBody
	{ $current=$iv_ruleRuleBody.current; }
	EOF;

// Rule RuleBody
ruleRuleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getLhsPatternParserRuleCall_0_0());
				}
				lv_lhs_0_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.reaction.dsl.ReactionLanguage.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getRuleTypeRuleTypeEnumRuleCall_1_0());
				}
				lv_ruleType_1_0=ruleRuleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					set(
						$current,
						"ruleType",
						lv_ruleType_1_0,
						"org.reaction.dsl.ReactionLanguage.RuleType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getRhsPatternParserRuleCall_2_0());
				}
				lv_rhs_2_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_2_0,
						"org.reaction.dsl.ReactionLanguage.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getRatesRatesParserRuleCall_3_0());
				}
				lv_rates_3_0=ruleRates
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					set(
						$current,
						"rates",
						lv_rates_3_0,
						"org.reaction.dsl.ReactionLanguage.Rates");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRates
entryRuleRates returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRatesRule()); }
	iv_ruleRates=ruleRates
	{ $current=$iv_ruleRates.current; }
	EOF;

// Rule Rates
ruleRates returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getRatesAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRatesAccess().getRateForwardArithmeticExprParserRuleCall_1_0());
				}
				lv_rateForward_1_0=ruleArithmeticExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRatesRule());
					}
					set(
						$current,
						"rateForward",
						lv_rateForward_1_0,
						"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_rateBackwardSet_2_0=','
					{
						newLeafNode(lv_rateBackwardSet_2_0, grammarAccess.getRatesAccess().getRateBackwardSetCommaKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRatesRule());
						}
						setWithLastConsumed($current, "rateBackwardSet", true, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRatesAccess().getRateBackwardArithmeticExprParserRuleCall_2_1_0());
					}
					lv_rateBackward_3_0=ruleArithmeticExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRatesRule());
						}
						set(
							$current,
							"rateBackward",
							lv_rateBackward_3_0,
							"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getBlankPatternAction_0_0(),
						$current);
				}
			)
			otherlv_1='_'
			{
				newLeafNode(otherlv_1, grammarAccess.getPatternAccess().get_Keyword_0_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPatternAccess().getBondsParserRuleCall_1());
		}
		this_Bonds_2=ruleBonds
		{
			$current = $this_Bonds_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBonds
entryRuleBonds returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBondsRule()); }
	iv_ruleBonds=ruleBonds
	{ $current=$iv_ruleBonds.current; }
	EOF;

// Rule Bonds
ruleBonds returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBondsAccess().getBondsBondParserRuleCall_0_0());
				}
				lv_bonds_0_0=ruleBond
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBondsRule());
					}
					add(
						$current,
						"bonds",
						lv_bonds_0_0,
						"org.reaction.dsl.ReactionLanguage.Bond");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getBondsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBondsAccess().getBondsBondParserRuleCall_1_1_0());
					}
					lv_bonds_2_0=ruleBond
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBondsRule());
						}
						add(
							$current,
							"bonds",
							lv_bonds_2_0,
							"org.reaction.dsl.ReactionLanguage.Bond");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBond
entryRuleBond returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBondRule()); }
	iv_ruleBond=ruleBond
	{ $current=$iv_ruleBond.current; }
	EOF;

// Rule Bond
ruleBond returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBondAccess().getLeftBondSideParserRuleCall_0_0());
				}
				lv_left_0_0=ruleBondSide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBondRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.reaction.dsl.ReactionLanguage.BondSide");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBondAccess().getBondTypeBondTypeEnumRuleCall_1_0_0());
					}
					lv_bondType_1_0=ruleBondType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBondRule());
						}
						set(
							$current,
							"bondType",
							lv_bondType_1_0,
							"org.reaction.dsl.ReactionLanguage.BondType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBondAccess().getRightBondSideOrWildcardParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleBondSideOrWildcard
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBondRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"org.reaction.dsl.ReactionLanguage.BondSideOrWildcard");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBondSideOrWildcard
entryRuleBondSideOrWildcard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBondSideOrWildcardRule()); }
	iv_ruleBondSideOrWildcard=ruleBondSideOrWildcard
	{ $current=$iv_ruleBondSideOrWildcard.current; }
	EOF;

// Rule BondSideOrWildcard
ruleBondSideOrWildcard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBondSideOrWildcardAccess().getBondSideParserRuleCall_0());
		}
		this_BondSide_0=ruleBondSide
		{
			$current = $this_BondSide_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBondSideOrWildcardAccess().getWildcardWildcardParserRuleCall_1_0());
				}
				lv_wildcard_1_0=ruleWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBondSideOrWildcardRule());
					}
					set(
						$current,
						"wildcard",
						lv_wildcard_1_0,
						"org.reaction.dsl.ReactionLanguage.Wildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWildcard
entryRuleWildcard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWildcardRule()); }
	iv_ruleWildcard=ruleWildcard
	{ $current=$iv_ruleWildcard.current; }
	EOF;

// Rule Wildcard
ruleWildcard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anything_0_0=RULE_ANYTHING
				{
					newLeafNode(lv_anything_0_0, grammarAccess.getWildcardAccess().getAnythingANYTHINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWildcardRule());
					}
					setWithLastConsumed(
						$current,
						"anything",
						true,
						"org.reaction.dsl.ReactionLanguage.ANYTHING");
				}
			)
		)
		    |
		(
			(
				lv_nothing_1_0=RULE_NULL
				{
					newLeafNode(lv_nothing_1_0, grammarAccess.getWildcardAccess().getNothingNULLTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWildcardRule());
					}
					setWithLastConsumed(
						$current,
						"nothing",
						true,
						"org.reaction.dsl.ReactionLanguage.NULL");
				}
			)
		)
	)
;

// Entry rule entryRuleBondSide
entryRuleBondSide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBondSideRule()); }
	iv_ruleBondSide=ruleBondSide
	{ $current=$iv_ruleBondSide.current; }
	EOF;

// Rule BondSide
ruleBondSide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBondSideRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getBondSideAccess().getAbstractAgentAbstractAgentCrossReference_0_0());
				}
			)
		)
		(
			(
				(
					lv_array_1_0='['
					{
						newLeafNode(lv_array_1_0, grammarAccess.getBondSideAccess().getArrayLeftSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBondSideRule());
						}
						setWithLastConsumed($current, "array", true, "[");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBondSideAccess().getIndexUnsignedIntParserRuleCall_1_1_0());
					}
					lv_index_2_0=ruleUnsignedInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBondSideRule());
						}
						set(
							$current,
							"index",
							lv_index_2_0,
							"org.reaction.dsl.ReactionLanguage.UnsignedInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getBondSideAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getBondSideAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBondSideAccess().getSiteInstanceSiteInstanceParserRuleCall_2_1_0());
					}
					lv_siteInstance_5_0=ruleSiteInstance
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBondSideRule());
						}
						set(
							$current,
							"siteInstance",
							lv_siteInstance_5_0,
							"org.reaction.dsl.ReactionLanguage.SiteInstance");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSiteInstance
entryRuleSiteInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSiteInstanceRule()); }
	iv_ruleSiteInstance=ruleSiteInstance
	{ $current=$iv_ruleSiteInstance.current; }
	EOF;

// Rule SiteInstance
ruleSiteInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSiteInstanceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSiteInstanceAccess().getSiteSiteCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSiteInstanceAccess().getSiteStateSiteInstanceStateParserRuleCall_1_0());
				}
				lv_siteState_1_0=ruleSiteInstanceState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSiteInstanceRule());
					}
					set(
						$current,
						"siteState",
						lv_siteState_1_0,
						"org.reaction.dsl.ReactionLanguage.SiteInstanceState");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSiteInstanceState
entryRuleSiteInstanceState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSiteInstanceStateRule()); }
	iv_ruleSiteInstanceState=ruleSiteInstanceState
	{ $current=$iv_ruleSiteInstanceState.current; }
	EOF;

// Rule SiteInstanceState
ruleSiteInstanceState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSiteInstanceStateAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSiteInstanceStateRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSiteInstanceStateAccess().getStateSiteStateCrossReference_1_0());
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getSiteInstanceStateAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getValueArithmeticExprParserRuleCall_3_0());
				}
				lv_value_3_0=ruleArithmeticExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitialisation
entryRuleInitialisation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialisationRule()); }
	iv_ruleInitialisation=ruleInitialisation
	{ $current=$iv_ruleInitialisation.current; }
	EOF;

// Rule Initialisation
ruleInitialisation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialisationAccess().getHeadInitialisationHeadParserRuleCall_0_0());
				}
				lv_head_0_0=ruleInitialisationHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialisationRule());
					}
					set(
						$current,
						"head",
						lv_head_0_0,
						"org.reaction.dsl.ReactionLanguage.InitialisationHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialisationAccess().getBodyInitialisationBodyParserRuleCall_1_0());
				}
				lv_body_1_0=ruleInitialisationBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialisationRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"org.reaction.dsl.ReactionLanguage.InitialisationBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitialisationHead
entryRuleInitialisationHead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialisationHeadRule()); }
	iv_ruleInitialisationHead=ruleInitialisationHead
	{ $current=$iv_ruleInitialisationHead.current; }
	EOF;

// Rule InitialisationHead
ruleInitialisationHead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='init'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialisationHeadAccess().getInitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialisationHeadAccess().getCntArithmeticExprParserRuleCall_1_0());
				}
				lv_cnt_1_0=ruleArithmeticExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialisationHeadRule());
					}
					set(
						$current,
						"cnt",
						lv_cnt_1_0,
						"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitialisationBody
entryRuleInitialisationBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialisationBodyRule()); }
	iv_ruleInitialisationBody=ruleInitialisationBody
	{ $current=$iv_ruleInitialisationBody.current; }
	EOF;

// Rule InitialisationBody
ruleInitialisationBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialisationBodyAccess().getSignatureSignatureParserRuleCall_0_0());
				}
				lv_signature_0_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialisationBodyRule());
					}
					set(
						$current,
						"signature",
						lv_signature_0_0,
						"org.reaction.dsl.ReactionLanguage.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialisationBodyAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialisationBodyAccess().getPatternPatternParserRuleCall_2_0());
				}
				lv_pattern_2_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialisationBodyRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_2_0,
						"org.reaction.dsl.ReactionLanguage.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObservable
entryRuleObservable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObservableRule()); }
	iv_ruleObservable=ruleObservable
	{ $current=$iv_ruleObservable.current; }
	EOF;

// Rule Observable
ruleObservable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='observe'
		{
			newLeafNode(otherlv_0, grammarAccess.getObservableAccess().getObserveKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObservableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObservableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObservableAccess().getBodyObservableBodyParserRuleCall_2_0());
				}
				lv_body_2_0=ruleObservableBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObservableRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.reaction.dsl.ReactionLanguage.ObservableBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObservableBody
entryRuleObservableBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObservableBodyRule()); }
	iv_ruleObservableBody=ruleObservableBody
	{ $current=$iv_ruleObservableBody.current; }
	EOF;

// Rule ObservableBody
ruleObservableBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getObservableBodyAccess().getObservablePatternParserRuleCall());
	}
	this_ObservablePattern_0=ruleObservablePattern
	{
		$current = $this_ObservablePattern_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleObservablePattern
entryRuleObservablePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObservablePatternRule()); }
	iv_ruleObservablePattern=ruleObservablePattern
	{ $current=$iv_ruleObservablePattern.current; }
	EOF;

// Rule ObservablePattern
ruleObservablePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObservablePatternAccess().getSignatureSignatureParserRuleCall_0_0());
				}
				lv_signature_0_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObservablePatternRule());
					}
					set(
						$current,
						"signature",
						lv_signature_0_0,
						"org.reaction.dsl.ReactionLanguage.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getObservablePatternAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObservablePatternAccess().getPatternPatternParserRuleCall_2_0());
				}
				lv_pattern_2_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObservablePatternRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_2_0,
						"org.reaction.dsl.ReactionLanguage.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getCommandAccess().getTerminateCommandParserRuleCall());
	}
	this_TerminateCommand_0=ruleTerminateCommand
	{
		$current = $this_TerminateCommand_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleTerminateCommand
entryRuleTerminateCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminateCommandRule()); }
	iv_ruleTerminateCommand=ruleTerminateCommand
	{ $current=$iv_ruleTerminateCommand.current; }
	EOF;

// Rule TerminateCommand
ruleTerminateCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='terminate'
		{
			newLeafNode(otherlv_0, grammarAccess.getTerminateCommandAccess().getTerminateKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getTerminateCommandAccess().getTerminateBodyParserRuleCall_1());
		}
		this_TerminateBody_1=ruleTerminateBody
		{
			$current = $this_TerminateBody_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminateBody
entryRuleTerminateBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminateBodyRule()); }
	iv_ruleTerminateBody=ruleTerminateBody
	{ $current=$iv_ruleTerminateBody.current; }
	EOF;

// Rule TerminateBody
ruleTerminateBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerminateBodyAccess().getTerminateTimeParserRuleCall_0());
		}
		this_TerminateTime_0=ruleTerminateTime
		{
			$current = $this_TerminateTime_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminateBodyAccess().getTerminateIterationsParserRuleCall_1());
		}
		this_TerminateIterations_1=ruleTerminateIterations
		{
			$current = $this_TerminateIterations_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminateBodyAccess().getTerminateCountParserRuleCall_2());
		}
		this_TerminateCount_2=ruleTerminateCount
		{
			$current = $this_TerminateCount_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminateTime
entryRuleTerminateTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminateTimeRule()); }
	iv_ruleTerminateTime=ruleTerminateTime
	{ $current=$iv_ruleTerminateTime.current; }
	EOF;

// Rule TerminateTime
ruleTerminateTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='time'
		{
			newLeafNode(otherlv_0, grammarAccess.getTerminateTimeAccess().getTimeKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getTerminateTimeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminateTimeAccess().getTimeArithmeticExprParserRuleCall_2_0());
				}
				lv_time_2_0=ruleArithmeticExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminateTimeRule());
					}
					set(
						$current,
						"time",
						lv_time_2_0,
						"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTerminateIterations
entryRuleTerminateIterations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminateIterationsRule()); }
	iv_ruleTerminateIterations=ruleTerminateIterations
	{ $current=$iv_ruleTerminateIterations.current; }
	EOF;

// Rule TerminateIterations
ruleTerminateIterations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='iterations'
		{
			newLeafNode(otherlv_0, grammarAccess.getTerminateIterationsAccess().getIterationsKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getTerminateIterationsAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminateIterationsAccess().getIterationsArithmeticExprParserRuleCall_2_0());
				}
				lv_iterations_2_0=ruleArithmeticExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminateIterationsRule());
					}
					set(
						$current,
						"iterations",
						lv_iterations_2_0,
						"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTerminateCount
entryRuleTerminateCount returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminateCountRule()); }
	iv_ruleTerminateCount=ruleTerminateCount
	{ $current=$iv_ruleTerminateCount.current; }
	EOF;

// Rule TerminateCount
ruleTerminateCount returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminateCountAccess().getSignatureSignatureParserRuleCall_0_0_0());
					}
					lv_signature_0_0=ruleSignature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminateCountRule());
						}
						set(
							$current,
							"signature",
							lv_signature_0_0,
							"org.reaction.dsl.ReactionLanguage.Signature");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getTerminateCountAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminateCountAccess().getPatternPatternParserRuleCall_1_0());
				}
				lv_pattern_2_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminateCountRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_2_0,
						"org.reaction.dsl.ReactionLanguage.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='matches'
		{
			newLeafNode(otherlv_3, grammarAccess.getTerminateCountAccess().getMatchesKeyword_2());
		}
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getTerminateCountAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminateCountAccess().getCntArithmeticExprParserRuleCall_4_0());
				}
				lv_cnt_5_0=ruleArithmeticExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminateCountRule());
					}
					set(
						$current,
						"cnt",
						lv_cnt_5_0,
						"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArithmeticExpr
entryRuleArithmeticExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExprRule()); }
	iv_ruleArithmeticExpr=ruleArithmeticExpr
	{ $current=$iv_ruleArithmeticExpr.current; }
	EOF;

// Rule ArithmeticExpr
ruleArithmeticExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArithmeticExprAccess().getAdditionParserRuleCall());
	}
	this_Addition_0=ruleAddition
	{
		$current = $this_Addition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.reaction.dsl.ReactionLanguage.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryExprParserRuleCall_0());
		}
		this_PrimaryExpr_0=rulePrimaryExpr
		{
			$current = $this_PrimaryExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationAccess().getPowLeftAction_1_0_2_0(),
								$current);
						}
					)
					otherlv_6='^'
					{
						newLeafNode(otherlv_6, grammarAccess.getMultiplicationAccess().getCircumflexAccentKeyword_1_0_2_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryExprParserRuleCall_1_1_0());
					}
					lv_right_7_0=rulePrimaryExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_7_0,
							"org.reaction.dsl.ReactionLanguage.PrimaryExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	iv_rulePrimaryExpr=rulePrimaryExpr
	{ $current=$iv_rulePrimaryExpr.current; }
	EOF;

// Rule PrimaryExpr
rulePrimaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getArithmeticExprParserRuleCall_0_1());
			}
			this_ArithmeticExpr_1=ruleArithmeticExpr
			{
				$current = $this_ArithmeticExpr_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExprAccess().getNumberLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getValueArithmeticTypeParserRuleCall_1_1_0());
					}
					lv_value_4_0=ruleArithmeticType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"org.reaction.dsl.ReactionLanguage.ArithmeticType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExprAccess().getFunctionCallAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getFuncMathFuncEnumRuleCall_2_1_0());
					}
					lv_func_6_0=ruleMathFunc
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"func",
							lv_func_6_0,
							"org.reaction.dsl.ReactionLanguage.MathFunc");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getExprArithmeticExprParserRuleCall_2_3_0());
					}
					lv_expr_8_0=ruleArithmeticExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"expr",
							lv_expr_8_0,
							"org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_2_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExprAccess().getVarRefAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryExprRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getPrimaryExprAccess().getRefVariableCrossReference_3_1_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleArithmeticType
entryRuleArithmeticType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticTypeRule()); }
	iv_ruleArithmeticType=ruleArithmeticType
	{ $current=$iv_ruleArithmeticType.current.getText(); }
	EOF;

// Rule ArithmeticType
ruleArithmeticType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getUnsignedIntParserRuleCall_0());
		}
		this_UnsignedInt_0=ruleUnsignedInt
		{
			$current.merge(this_UnsignedInt_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getSignedIntParserRuleCall_1());
		}
		this_SignedInt_1=ruleSignedInt
		{
			$current.merge(this_SignedInt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getUnsignedDoubleParserRuleCall_2());
		}
		this_UnsignedDouble_2=ruleUnsignedDouble
		{
			$current.merge(this_UnsignedDouble_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getSignedDoubleParserRuleCall_3());
		}
		this_SignedDouble_3=ruleSignedDouble
		{
			$current.merge(this_SignedDouble_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getUnsignedScientificDoubleParserRuleCall_4());
		}
		this_UnsignedScientificDouble_4=ruleUnsignedScientificDouble
		{
			$current.merge(this_UnsignedScientificDouble_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getSignedScientificDoubleParserRuleCall_5());
		}
		this_SignedScientificDouble_5=ruleSignedScientificDouble
		{
			$current.merge(this_SignedScientificDouble_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSignedScientificDouble
entryRuleSignedScientificDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignedScientificDoubleRule()); }
	iv_ruleSignedScientificDouble=ruleSignedScientificDouble
	{ $current=$iv_ruleSignedScientificDouble.current.getText(); }
	EOF;

// Rule SignedScientificDouble
ruleSignedScientificDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignedScientificDoubleAccess().getHyphenMinusKeyword_0());
		}
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getSignedScientificDoubleAccess().getINTTerminalRuleCall_1_0());
			}
			    |
			this_NULL_2=RULE_NULL
			{
				$current.merge(this_NULL_2);
			}
			{
				newLeafNode(this_NULL_2, grammarAccess.getSignedScientificDoubleAccess().getNULLTerminalRuleCall_1_1());
			}
		)
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSignedScientificDoubleAccess().getFullStopKeyword_2_0());
			}
			(
				this_INT_4=RULE_INT
				{
					$current.merge(this_INT_4);
				}
				{
					newLeafNode(this_INT_4, grammarAccess.getSignedScientificDoubleAccess().getINTTerminalRuleCall_2_1_0());
				}
				    |
				this_NULL_5=RULE_NULL
				{
					$current.merge(this_NULL_5);
				}
				{
					newLeafNode(this_NULL_5, grammarAccess.getSignedScientificDoubleAccess().getNULLTerminalRuleCall_2_1_1());
				}
			)
		)?
		kw='E'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignedScientificDoubleAccess().getEKeyword_3());
		}
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSignedScientificDoubleAccess().getPlusSignKeyword_4_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSignedScientificDoubleAccess().getHyphenMinusKeyword_4_1());
			}
		)?
		this_INT_9=RULE_INT
		{
			$current.merge(this_INT_9);
		}
		{
			newLeafNode(this_INT_9, grammarAccess.getSignedScientificDoubleAccess().getINTTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleUnsignedScientificDouble
entryRuleUnsignedScientificDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedScientificDoubleRule()); }
	iv_ruleUnsignedScientificDouble=ruleUnsignedScientificDouble
	{ $current=$iv_ruleUnsignedScientificDouble.current.getText(); }
	EOF;

// Rule UnsignedScientificDouble
ruleUnsignedScientificDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getUnsignedScientificDoubleAccess().getINTTerminalRuleCall_0_0());
			}
			    |
			this_NULL_1=RULE_NULL
			{
				$current.merge(this_NULL_1);
			}
			{
				newLeafNode(this_NULL_1, grammarAccess.getUnsignedScientificDoubleAccess().getNULLTerminalRuleCall_0_1());
			}
		)
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getUnsignedScientificDoubleAccess().getFullStopKeyword_1_0());
			}
			(
				this_INT_3=RULE_INT
				{
					$current.merge(this_INT_3);
				}
				{
					newLeafNode(this_INT_3, grammarAccess.getUnsignedScientificDoubleAccess().getINTTerminalRuleCall_1_1_0());
				}
				    |
				this_NULL_4=RULE_NULL
				{
					$current.merge(this_NULL_4);
				}
				{
					newLeafNode(this_NULL_4, grammarAccess.getUnsignedScientificDoubleAccess().getNULLTerminalRuleCall_1_1_1());
				}
			)
		)?
		kw='E'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnsignedScientificDoubleAccess().getEKeyword_2());
		}
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getUnsignedScientificDoubleAccess().getPlusSignKeyword_3_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getUnsignedScientificDoubleAccess().getHyphenMinusKeyword_3_1());
			}
		)?
		this_INT_8=RULE_INT
		{
			$current.merge(this_INT_8);
		}
		{
			newLeafNode(this_INT_8, grammarAccess.getUnsignedScientificDoubleAccess().getINTTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleUnsignedInt
entryRuleUnsignedInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedIntRule()); }
	iv_ruleUnsignedInt=ruleUnsignedInt
	{ $current=$iv_ruleUnsignedInt.current.getText(); }
	EOF;

// Rule UnsignedInt
ruleUnsignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getUnsignedIntAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_NULL_1=RULE_NULL
		{
			$current.merge(this_NULL_1);
		}
		{
			newLeafNode(this_NULL_1, grammarAccess.getUnsignedIntAccess().getNULLTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); }
	iv_ruleSignedInt=ruleSignedInt
	{ $current=$iv_ruleSignedInt.current.getText(); }
	EOF;

// Rule SignedInt
ruleSignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignedIntAccess().getHyphenMinusKeyword_0());
		}
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getSignedIntAccess().getINTTerminalRuleCall_1_0());
			}
			    |
			this_NULL_2=RULE_NULL
			{
				$current.merge(this_NULL_2);
			}
			{
				newLeafNode(this_NULL_2, grammarAccess.getSignedIntAccess().getNULLTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleUnsignedDouble
entryRuleUnsignedDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedDoubleRule()); }
	iv_ruleUnsignedDouble=ruleUnsignedDouble
	{ $current=$iv_ruleUnsignedDouble.current.getText(); }
	EOF;

// Rule UnsignedDouble
ruleUnsignedDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getUnsignedDoubleAccess().getINTTerminalRuleCall_0_0());
			}
			    |
			this_NULL_1=RULE_NULL
			{
				$current.merge(this_NULL_1);
			}
			{
				newLeafNode(this_NULL_1, grammarAccess.getUnsignedDoubleAccess().getNULLTerminalRuleCall_0_1());
			}
		)
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnsignedDoubleAccess().getFullStopKeyword_1());
		}
		(
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getUnsignedDoubleAccess().getINTTerminalRuleCall_2_0());
			}
			    |
			this_NULL_4=RULE_NULL
			{
				$current.merge(this_NULL_4);
			}
			{
				newLeafNode(this_NULL_4, grammarAccess.getUnsignedDoubleAccess().getNULLTerminalRuleCall_2_1());
			}
		)
	)
;

// Entry rule entryRuleSignedDouble
entryRuleSignedDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignedDoubleRule()); }
	iv_ruleSignedDouble=ruleSignedDouble
	{ $current=$iv_ruleSignedDouble.current.getText(); }
	EOF;

// Rule SignedDouble
ruleSignedDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignedDoubleAccess().getHyphenMinusKeyword_0());
		}
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getSignedDoubleAccess().getINTTerminalRuleCall_1_0());
			}
			    |
			this_NULL_2=RULE_NULL
			{
				$current.merge(this_NULL_2);
			}
			{
				newLeafNode(this_NULL_2, grammarAccess.getSignedDoubleAccess().getNULLTerminalRuleCall_1_1());
			}
		)
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignedDoubleAccess().getFullStopKeyword_2());
		}
		(
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getSignedDoubleAccess().getINTTerminalRuleCall_3_0());
			}
			    |
			this_NULL_5=RULE_NULL
			{
				$current.merge(this_NULL_5);
			}
			{
				newLeafNode(this_NULL_5, grammarAccess.getSignedDoubleAccess().getNULLTerminalRuleCall_3_1());
			}
		)
	)
;

// Rule MathFunc
ruleMathFunc returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='sqrt'
			{
				$current = grammarAccess.getMathFuncAccess().getSQRTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMathFuncAccess().getSQRTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='abs'
			{
				$current = grammarAccess.getMathFuncAccess().getABSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMathFuncAccess().getABSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule RuleType
ruleRuleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=>'
			{
				$current = grammarAccess.getRuleTypeAccess().getUNIEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRuleTypeAccess().getUNIEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<=>'
			{
				$current = grammarAccess.getRuleTypeAccess().getBIEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRuleTypeAccess().getBIEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BondType
ruleBondType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='//'
			{
				$current = grammarAccess.getBondTypeAccess().getUNBOUNDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBondTypeAccess().getUNBOUNDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='+'
			{
				$current = grammarAccess.getBondTypeAccess().getBOUNDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBondTypeAccess().getBOUNDEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ANYTHING : '?';

RULE_NULL : '0';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_NEWLINE : '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
