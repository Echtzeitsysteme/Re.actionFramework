/*
 * generated by Xtext 2.19.0
 */
package org.reaction.dsl.scoping

import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.reaction.dsl.reactionLanguage.ReactionLanguagePackage
import org.reaction.dsl.reactionLanguage.AgentInstance
import org.reaction.dsl.reactionLanguage.SiteInstanceState
import org.reaction.dsl.reactionLanguage.SiteInstance
import org.reaction.dsl.reactionLanguage.BondSide
import org.reaction.dsl.reactionLanguage.VarRef
import org.reaction.dsl.reactionLanguage.ReactionModel
import org.reaction.dsl.reactionLanguage.Complex
import org.reaction.dsl.reactionLanguage.Variable
import org.reaction.dsl.reactionLanguage.Signature
import org.reaction.dsl.reactionLanguage.Rule
import org.reaction.dsl.reactionLanguage.TerminateCount
import org.reaction.dsl.reactionLanguage.ObservablePattern
import org.reaction.dsl.reactionLanguage.InitialisationBody
import org.reaction.dsl.reactionLanguage.Agent

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ReactionLanguageScopeProvider extends AbstractReactionLanguageScopeProvider {

	override getScope(EObject context, EReference reference) {

		if (context instanceof AgentInstance && reference == ReactionLanguagePackage.Literals.AGENT_INSTANCE__INSTANCE_OF) {
			return getScope_AgentInstance_AgentInstanceInstanceOf(context as AgentInstance);
		}

		if (context instanceof SiteInstance && reference == ReactionLanguagePackage.Literals.SITE_INSTANCE__SITE) {
			return getScope_SiteInstance_SiteInstanceSite(context as SiteInstance);
		}

		if (context instanceof SiteInstanceState && reference == ReactionLanguagePackage.Literals.SITE_INSTANCE_STATE__STATE) {
			return getScope_SiteInstanceState_SiteInstanceStateState(context as SiteInstanceState);
		}

		if (context instanceof BondSide && reference == ReactionLanguagePackage.Literals.BOND_SIDE__ABSTRACT_AGENT) {
			return getScope_BondSide_BondSideAbstractAgent(context as BondSide);
		}

		if (context instanceof VarRef && reference == ReactionLanguagePackage.Literals.VAR_REF__REF) {
			return getScope_VarRef_VarRefRef(context as VarRef);
		}

		return super.getScope(context, reference);

	}
	
	def private getScope_AgentInstance_AgentInstanceInstanceOf(AgentInstance context){
		
		val root = EcoreUtil2.getRootContainer(context);
		val allAgents = EcoreUtil2.getAllContentsOfType(root, Agent);
		return Scopes.scopeFor(allAgents);
	}

	def private getScope_VarRef_VarRefRef(VarRef context) {

		var candidates = new ArrayList();
		var containerTraverser = context.eContainer;

		while (!(containerTraverser instanceof ReactionModel)) {

			if (containerTraverser instanceof Complex) {
				val complex = containerTraverser as Complex;
				val elements = complex.elements;
				val vars = elements.filter(Variable);
				candidates.addAll(vars);
			}

			containerTraverser = containerTraverser.eContainer;
		}

		if (containerTraverser instanceof ReactionModel) {
			val ReactionModel = containerTraverser as ReactionModel;
			val elements = ReactionModel.elements;
			val vars = elements.filter(Variable);
			candidates.addAll(vars);
		}

		return Scopes.scopeFor(candidates);
	}

	def private getScope_BondSide_BondSideAbstractAgent(BondSide context) {
		var signature = null as Signature;
		var containerTraverser = context.eContainer;
		var candidates = new ArrayList();

		while (!(containerTraverser instanceof ReactionModel)) {
			containerTraverser = containerTraverser.eContainer;

			if (containerTraverser instanceof Rule) {
				signature = containerTraverser.head.signature;
			}

			if (containerTraverser instanceof Complex) {
				signature = containerTraverser.signature;
			}

			if (containerTraverser instanceof InitialisationBody) {
				signature = containerTraverser.signature;
			}

			if (containerTraverser instanceof ObservablePattern) {
				signature = containerTraverser.signature;
			}

			if (containerTraverser instanceof TerminateCount) {
				signature = containerTraverser.signature;
			}

			if (signature !== null) {
				candidates.addAll(signature.instances);
			}
		}

		// Add all possible Agents before returning:
		val root = EcoreUtil2.getRootContainer(context);
		val agents = EcoreUtil2.getAllContentsOfType(root, Agent)
		candidates.addAll(agents);

		return Scopes.scopeFor(candidates);
	}

	def private getScope_SiteInstance_SiteInstanceSite(SiteInstance context) {

		val bondSide = context.eContainer;

		if (bondSide === null) {
			return IScope.NULLSCOPE;
		}
		
		if (bondSide instanceof BondSide) {
			val rightBondSide = context.eContainer as BondSide;
			if (rightBondSide !== null) {

				val abstractAgent = rightBondSide.abstractAgent

				if (abstractAgent !== null) {
					if (abstractAgent instanceof Agent) {
						val sites = (abstractAgent as Agent).sites;
						return Scopes.scopeFor(sites);
					}
					if (abstractAgent instanceof AgentInstance) {
						val aInstance = abstractAgent;
						if (aInstance.instanceOf !== null) {
							val sites = aInstance.instanceOf.sites;
							return Scopes.scopeFor(sites);
						}
					}

					return IScope.NULLSCOPE;
				}
			}
		}

		return IScope.NULLSCOPE;
	}

	def private getScope_SiteInstanceState_SiteInstanceStateState(SiteInstanceState context) {
		val site = (context.eContainer as SiteInstance).site;
		val states = site.states;
		return Scopes.scopeFor(states);
	}

	def private <T extends EObject> getScope_SignatureRelevant(T context) {
		var signature = null as Signature;
		var containerTraverser = context.eContainer;
		var candidates = new ArrayList();

		while (!(containerTraverser instanceof ReactionModel)) {
			containerTraverser = containerTraverser.eContainer;

			if (containerTraverser instanceof Rule) {
				signature = containerTraverser.head.signature;
			}

			if (containerTraverser instanceof Complex) {
				signature = containerTraverser.signature;
			}

			if (containerTraverser instanceof InitialisationBody) {
				signature = containerTraverser.signature;
			}

			if (containerTraverser instanceof ObservablePattern) {
				signature = containerTraverser.signature;
			}

			if (containerTraverser instanceof TerminateCount) {
				signature = containerTraverser.signature;
			}

			if (signature !== null) {
				candidates.addAll(signature.instances);
			}

		}

		return candidates;
	}

}
