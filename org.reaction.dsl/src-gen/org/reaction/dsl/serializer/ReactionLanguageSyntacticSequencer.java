/*
 * generated by Xtext 2.20.0
 */
package org.reaction.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.reaction.dsl.services.ReactionLanguageGrammarAccess;

@SuppressWarnings("all")
public class ReactionLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ReactionLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PrimaryExpr_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_PrimaryExpr_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_ReactionModel_SL_COMMENTTerminalRuleCall_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ReactionLanguageGrammarAccess) access;
		match_PrimaryExpr_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_0_0());
		match_PrimaryExpr_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_0_0());
		match_ReactionModel_SL_COMMENTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getReactionModelAccess().getSL_COMMENTTerminalRuleCall_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getANYTHINGRule())
			return getANYTHINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNULLRule())
			return getNULLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSL_COMMENTRule())
			return getSL_COMMENTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ANYTHING:
	 * 	'?'
	 * ;
	 */
	protected String getANYTHINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "?";
	}
	
	/**
	 * terminal NEWLINE:
	 * 	'\n';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * terminal NULL:
	 * 	'0'
	 * ;
	 */
	protected String getNULLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "0";
	}
	
	/**
	 * @Override
	 * terminal SL_COMMENT:
	 * 	'#' !('\n' | '\r')* ('\r'? '\n')?;
	 */
	protected String getSL_COMMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "#";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_PrimaryExpr_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_PrimaryExpr_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpr_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_PrimaryExpr_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReactionModel_SL_COMMENTTerminalRuleCall_1_q.equals(syntax))
				emit_ReactionModel_SL_COMMENTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) func=MathFunc
	 *     (rule start) (ambiguity) ref=[Variable|ID]
	 *     (rule start) (ambiguity) value=ArithmeticType
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Multi.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Pow.left=}
	 */
	protected void emit_PrimaryExpr_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Multi.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Pow.left=}
	 */
	protected void emit_PrimaryExpr_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SL_COMMENT?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=Component (ambiguity) (rule end)
	 *     elements+=Component (ambiguity) NEWLINE elements+=Component
	 *     elements+=Component (ambiguity) elements+=Component
	 */
	protected void emit_ReactionModel_SL_COMMENTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
