/*
 * generated by Xtext 2.20.0
 */
package org.reaction.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReactionLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ReactionModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ReactionModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsComponentParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsComponentParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		
		//ReactionModel:
		//	(elements+=Component SL_COMMENT? (NEWLINE elements+=Component)*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(elements+=Component SL_COMMENT? (NEWLINE elements+=Component)*)*
		public Group getGroup() { return cGroup; }
		
		//elements+=Component
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Component
		public RuleCall getElementsComponentParserRuleCall_0_0() { return cElementsComponentParserRuleCall_0_0; }
		
		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }
		
		//(NEWLINE elements+=Component)*
		public Group getGroup_2() { return cGroup_2; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2_0() { return cNEWLINETerminalRuleCall_2_0; }
		
		//elements+=Component
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//Component
		public RuleCall getElementsComponentParserRuleCall_2_1_0() { return cElementsComponentParserRuleCall_2_1_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAgentDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComplexParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInitialisationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObservableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCommandParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Component:
		//	AgentDeclaration | Rule | Complex | Initialisation | Observable | Variable | Command;
		@Override public ParserRule getRule() { return rule; }
		
		//AgentDeclaration | Rule | Complex | Initialisation | Observable | Variable | Command
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AgentDeclaration
		public RuleCall getAgentDeclarationParserRuleCall_0() { return cAgentDeclarationParserRuleCall_0; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }
		
		//Complex
		public RuleCall getComplexParserRuleCall_2() { return cComplexParserRuleCall_2; }
		
		//Initialisation
		public RuleCall getInitialisationParserRuleCall_3() { return cInitialisationParserRuleCall_3; }
		
		//Observable
		public RuleCall getObservableParserRuleCall_4() { return cObservableParserRuleCall_4; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_5() { return cVariableParserRuleCall_5; }
		
		//Command
		public RuleCall getCommandParserRuleCall_6() { return cCommandParserRuleCall_6; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSitesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_1_0 = (RuleCall)cSitesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSitesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_2_1_0 = (RuleCall)cSitesAssignment_1_2_1.eContents().get(0);
		
		//Agent:
		//	name=ID (':' sites+=Site (',' sites+=Site)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' sites+=Site (',' sites+=Site)*)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' sites+=Site (',' sites+=Site)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_1() { return cSitesAssignment_1_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_1_0() { return cSitesSiteParserRuleCall_1_1_0; }
		
		//(',' sites+=Site)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_2_1() { return cSitesAssignment_1_2_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_2_1_0() { return cSitesSiteParserRuleCall_1_2_1_0; }
	}
	public class AgentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.AgentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclaredAgentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaredAgentsAgentParserRuleCall_1_0 = (RuleCall)cDeclaredAgentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDeclaredAgentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclaredAgentsAgentParserRuleCall_2_1_0 = (RuleCall)cDeclaredAgentsAssignment_2_1.eContents().get(0);
		
		//AgentDeclaration:
		//	'agent' declaredAgents+=Agent (';' declaredAgents+=Agent)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'agent' declaredAgents+=Agent (';' declaredAgents+=Agent)*
		public Group getGroup() { return cGroup; }
		
		//'agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//declaredAgents+=Agent
		public Assignment getDeclaredAgentsAssignment_1() { return cDeclaredAgentsAssignment_1; }
		
		//Agent
		public RuleCall getDeclaredAgentsAgentParserRuleCall_1_0() { return cDeclaredAgentsAgentParserRuleCall_1_0; }
		
		//(';' declaredAgents+=Agent)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//declaredAgents+=Agent
		public Assignment getDeclaredAgentsAssignment_2_1() { return cDeclaredAgentsAssignment_2_1; }
		
		//Agent
		public RuleCall getDeclaredAgentsAgentParserRuleCall_2_1_0() { return cDeclaredAgentsAgentParserRuleCall_2_1_0; }
	}
	public class AgentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.AgentInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstanceOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInstanceOfAgentCrossReference_2_0 = (CrossReference)cInstanceOfAssignment_2.eContents().get(0);
		private final RuleCall cInstanceOfAgentIDTerminalRuleCall_2_0_1 = (RuleCall)cInstanceOfAgentCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_3_0_0 = (Keyword)cArrayAssignment_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_3_1_0 = (RuleCall)cSizeAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//AgentInstance:
		//	name=ID ':' instanceOf=[Agent] (array?='[' size=INT ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' instanceOf=[Agent] (array?='[' size=INT ']')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//instanceOf=[Agent]
		public Assignment getInstanceOfAssignment_2() { return cInstanceOfAssignment_2; }
		
		//[Agent]
		public CrossReference getInstanceOfAgentCrossReference_2_0() { return cInstanceOfAgentCrossReference_2_0; }
		
		//ID
		public RuleCall getInstanceOfAgentIDTerminalRuleCall_2_0_1() { return cInstanceOfAgentIDTerminalRuleCall_2_0_1; }
		
		//(array?='[' size=INT ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//array?='['
		public Assignment getArrayAssignment_3_0() { return cArrayAssignment_3_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_3_0_0() { return cArrayLeftSquareBracketKeyword_3_0_0; }
		
		//size=INT
		public Assignment getSizeAssignment_3_1() { return cSizeAssignment_3_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_1_0() { return cSizeINTTerminalRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class SiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Site");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatesSiteStateParserRuleCall_1_1_0 = (RuleCall)cStatesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cStatesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cStatesSiteStateParserRuleCall_1_2_1_0 = (RuleCall)cStatesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Site:
		//	name=ID ('(' states+=SiteState (',' states+=SiteState)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' states+=SiteState (',' states+=SiteState)* ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' states+=SiteState (',' states+=SiteState)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//states+=SiteState
		public Assignment getStatesAssignment_1_1() { return cStatesAssignment_1_1; }
		
		//SiteState
		public RuleCall getStatesSiteStateParserRuleCall_1_1_0() { return cStatesSiteStateParserRuleCall_1_1_0; }
		
		//(',' states+=SiteState)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//states+=SiteState
		public Assignment getStatesAssignment_1_2_1() { return cStatesAssignment_1_2_1; }
		
		//SiteState
		public RuleCall getStatesSiteStateParserRuleCall_1_2_1_0() { return cStatesSiteStateParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class SiteStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.SiteState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SiteState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ComplexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Complex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComplexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_1_0 = (RuleCall)cSignatureAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsComplexElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Complex:
		//	'complex' signature=Signature '{'
		//	elements+=ComplexElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'complex' signature=Signature '{' elements+=ComplexElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'complex'
		public Keyword getComplexKeyword_0() { return cComplexKeyword_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_0() { return cSignatureSignatureParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=ComplexElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//ComplexElement
		public RuleCall getElementsComplexElementParserRuleCall_3_0() { return cElementsComplexElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComplexElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ComplexElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComplexParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObservableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ComplexElement:
		//	Complex | Rule | Variable | Observable;
		@Override public ParserRule getRule() { return rule; }
		
		//Complex | Rule | Variable | Observable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Complex
		public RuleCall getComplexParserRuleCall_0() { return cComplexParserRuleCall_0; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
		
		//Observable
		public RuleCall getObservableParserRuleCall_3() { return cObservableParserRuleCall_3; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstancesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstancesAgentInstanceParserRuleCall_1_0 = (RuleCall)cInstancesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInstancesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInstancesAgentInstanceParserRuleCall_2_1_0 = (RuleCall)cInstancesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Signature:
		//	'(' instances+=AgentInstance (',' instances+=AgentInstance)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' instances+=AgentInstance (',' instances+=AgentInstance)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//instances+=AgentInstance
		public Assignment getInstancesAssignment_1() { return cInstancesAssignment_1; }
		
		//AgentInstance
		public RuleCall getInstancesAgentInstanceParserRuleCall_1_0() { return cInstancesAgentInstanceParserRuleCall_1_0; }
		
		//(',' instances+=AgentInstance)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//instances+=AgentInstance
		public Assignment getInstancesAssignment_2_1() { return cInstancesAssignment_2_1; }
		
		//AgentInstance
		public RuleCall getInstancesAgentInstanceParserRuleCall_2_1_0() { return cInstancesAgentInstanceParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadRuleHeadParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyRuleBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Rule:
		//	'rule' head=RuleHead body=RuleBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' head=RuleHead body=RuleBody
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//head=RuleHead
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }
		
		//RuleHead
		public RuleCall getHeadRuleHeadParserRuleCall_1_0() { return cHeadRuleHeadParserRuleCall_1_0; }
		
		//body=RuleBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//RuleBody
		public RuleCall getBodyRuleBodyParserRuleCall_2_0() { return cBodyRuleBodyParserRuleCall_2_0; }
	}
	public class RuleHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.RuleHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_1_0 = (RuleCall)cSignatureAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RuleHead:
		//	name=ID signature=Signature? ':';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID signature=Signature? ':'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//signature=Signature?
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_1_0() { return cSignatureSignatureParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}
	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.RuleBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPatternParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cRuleTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleTypeRuleTypeEnumRuleCall_1_0 = (RuleCall)cRuleTypeAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPatternParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final Assignment cRatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRatesRatesParserRuleCall_3_0 = (RuleCall)cRatesAssignment_3.eContents().get(0);
		
		//RuleBody:
		//	lhs=Pattern ruleType=RuleType rhs=Pattern rates=Rates;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=Pattern ruleType=RuleType rhs=Pattern rates=Rates
		public Group getGroup() { return cGroup; }
		
		//lhs=Pattern
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//Pattern
		public RuleCall getLhsPatternParserRuleCall_0_0() { return cLhsPatternParserRuleCall_0_0; }
		
		//ruleType=RuleType
		public Assignment getRuleTypeAssignment_1() { return cRuleTypeAssignment_1; }
		
		//RuleType
		public RuleCall getRuleTypeRuleTypeEnumRuleCall_1_0() { return cRuleTypeRuleTypeEnumRuleCall_1_0; }
		
		//rhs=Pattern
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//Pattern
		public RuleCall getRhsPatternParserRuleCall_2_0() { return cRhsPatternParserRuleCall_2_0; }
		
		//rates=Rates
		public Assignment getRatesAssignment_3() { return cRatesAssignment_3; }
		
		//Rates
		public RuleCall getRatesRatesParserRuleCall_3_0() { return cRatesRatesParserRuleCall_3_0; }
	}
	public class RatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Rates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRateForwardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRateForwardArithmeticExprParserRuleCall_1_0 = (RuleCall)cRateForwardAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRateBackwardSetAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cRateBackwardSetCommaKeyword_2_0_0 = (Keyword)cRateBackwardSetAssignment_2_0.eContents().get(0);
		private final Assignment cRateBackwardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRateBackwardArithmeticExprParserRuleCall_2_1_0 = (RuleCall)cRateBackwardAssignment_2_1.eContents().get(0);
		
		//Rates:
		//	'@' rateForward=ArithmeticExpr (rateBackwardSet?=',' rateBackward=ArithmeticExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' rateForward=ArithmeticExpr (rateBackwardSet?=',' rateBackward=ArithmeticExpr)?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//rateForward=ArithmeticExpr
		public Assignment getRateForwardAssignment_1() { return cRateForwardAssignment_1; }
		
		//ArithmeticExpr
		public RuleCall getRateForwardArithmeticExprParserRuleCall_1_0() { return cRateForwardArithmeticExprParserRuleCall_1_0; }
		
		//(rateBackwardSet?=',' rateBackward=ArithmeticExpr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//rateBackwardSet?=','
		public Assignment getRateBackwardSetAssignment_2_0() { return cRateBackwardSetAssignment_2_0; }
		
		//','
		public Keyword getRateBackwardSetCommaKeyword_2_0_0() { return cRateBackwardSetCommaKeyword_2_0_0; }
		
		//rateBackward=ArithmeticExpr
		public Assignment getRateBackwardAssignment_2_1() { return cRateBackwardAssignment_2_1; }
		
		//ArithmeticExpr
		public RuleCall getRateBackwardArithmeticExprParserRuleCall_2_1_0() { return cRateBackwardArithmeticExprParserRuleCall_2_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBlankPatternAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword c_Keyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cBondsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Pattern:
		//	{BlankPattern} '_' | Bonds;
		@Override public ParserRule getRule() { return rule; }
		
		//{BlankPattern} '_' | Bonds
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BlankPattern} '_'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BlankPattern}
		public Action getBlankPatternAction_0_0() { return cBlankPatternAction_0_0; }
		
		//'_'
		public Keyword get_Keyword_0_1() { return c_Keyword_0_1; }
		
		//Bonds
		public RuleCall getBondsParserRuleCall_1() { return cBondsParserRuleCall_1; }
	}
	public class BondsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Bonds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBondsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBondsBondParserRuleCall_0_0 = (RuleCall)cBondsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBondsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBondsBondParserRuleCall_1_1_0 = (RuleCall)cBondsAssignment_1_1.eContents().get(0);
		
		//Bonds:
		//	bonds+=Bond (',' bonds+=Bond)*;
		@Override public ParserRule getRule() { return rule; }
		
		//bonds+=Bond (',' bonds+=Bond)*
		public Group getGroup() { return cGroup; }
		
		//bonds+=Bond
		public Assignment getBondsAssignment_0() { return cBondsAssignment_0; }
		
		//Bond
		public RuleCall getBondsBondParserRuleCall_0_0() { return cBondsBondParserRuleCall_0_0; }
		
		//(',' bonds+=Bond)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//bonds+=Bond
		public Assignment getBondsAssignment_1_1() { return cBondsAssignment_1_1; }
		
		//Bond
		public RuleCall getBondsBondParserRuleCall_1_1_0() { return cBondsBondParserRuleCall_1_1_0; }
	}
	public class AbstractAgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.AbstractAgent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAgentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAgentInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractAgent:
		//	Agent | AgentInstance;
		@Override public ParserRule getRule() { return rule; }
		
		//Agent | AgentInstance
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Agent
		public RuleCall getAgentParserRuleCall_0() { return cAgentParserRuleCall_0; }
		
		//AgentInstance
		public RuleCall getAgentInstanceParserRuleCall_1() { return cAgentInstanceParserRuleCall_1; }
	}
	public class BondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Bond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftBondSideParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cBondTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBondTypeBondTypeEnumRuleCall_1_0_0 = (RuleCall)cBondTypeAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBondSideOrWildcardParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Bond:
		//	left=BondSide (bondType=BondType right=BondSideOrWildcard)?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=BondSide (bondType=BondType right=BondSideOrWildcard)?
		public Group getGroup() { return cGroup; }
		
		//left=BondSide
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//BondSide
		public RuleCall getLeftBondSideParserRuleCall_0_0() { return cLeftBondSideParserRuleCall_0_0; }
		
		//(bondType=BondType right=BondSideOrWildcard)?
		public Group getGroup_1() { return cGroup_1; }
		
		//bondType=BondType
		public Assignment getBondTypeAssignment_1_0() { return cBondTypeAssignment_1_0; }
		
		//BondType
		public RuleCall getBondTypeBondTypeEnumRuleCall_1_0_0() { return cBondTypeBondTypeEnumRuleCall_1_0_0; }
		
		//right=BondSideOrWildcard
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//BondSideOrWildcard
		public RuleCall getRightBondSideOrWildcardParserRuleCall_1_1_0() { return cRightBondSideOrWildcardParserRuleCall_1_1_0; }
	}
	public class BondSideOrWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.BondSideOrWildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBondSideParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cWildcardAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWildcardWildcardParserRuleCall_1_0 = (RuleCall)cWildcardAssignment_1.eContents().get(0);
		
		//BondSideOrWildcard:
		//	BondSide | wildcard=Wildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//BondSide | wildcard=Wildcard
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BondSide
		public RuleCall getBondSideParserRuleCall_0() { return cBondSideParserRuleCall_0; }
		
		//wildcard=Wildcard
		public Assignment getWildcardAssignment_1() { return cWildcardAssignment_1; }
		
		//Wildcard
		public RuleCall getWildcardWildcardParserRuleCall_1_0() { return cWildcardWildcardParserRuleCall_1_0; }
	}
	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Wildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAnythingAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAnythingANYTHINGTerminalRuleCall_0_0 = (RuleCall)cAnythingAssignment_0.eContents().get(0);
		private final Assignment cNothingAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNothingNULLTerminalRuleCall_1_0 = (RuleCall)cNothingAssignment_1.eContents().get(0);
		
		//Wildcard:
		//	anything?=ANYTHING | nothing?=NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//anything?=ANYTHING | nothing?=NULL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//anything?=ANYTHING
		public Assignment getAnythingAssignment_0() { return cAnythingAssignment_0; }
		
		//ANYTHING
		public RuleCall getAnythingANYTHINGTerminalRuleCall_0_0() { return cAnythingANYTHINGTerminalRuleCall_0_0; }
		
		//nothing?=NULL
		public Assignment getNothingAssignment_1() { return cNothingAssignment_1; }
		
		//NULL
		public RuleCall getNothingNULLTerminalRuleCall_1_0() { return cNothingNULLTerminalRuleCall_1_0; }
	}
	public class BondSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.BondSide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAgentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAbstractAgentAbstractAgentCrossReference_0_0 = (CrossReference)cAbstractAgentAssignment_0.eContents().get(0);
		private final RuleCall cAbstractAgentAbstractAgentIDTerminalRuleCall_0_0_1 = (RuleCall)cAbstractAgentAbstractAgentCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_1_0_0 = (Keyword)cArrayAssignment_1_0.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexUnsignedIntParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSiteInstanceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSiteInstanceSiteInstanceParserRuleCall_2_1_0 = (RuleCall)cSiteInstanceAssignment_2_1.eContents().get(0);
		
		//BondSide:
		//	abstractAgent=[AbstractAgent] (array?='[' index=UnsignedInt ']')? ('.' siteInstance=SiteInstance)?;
		@Override public ParserRule getRule() { return rule; }
		
		//abstractAgent=[AbstractAgent] (array?='[' index=UnsignedInt ']')? ('.' siteInstance=SiteInstance)?
		public Group getGroup() { return cGroup; }
		
		//abstractAgent=[AbstractAgent]
		public Assignment getAbstractAgentAssignment_0() { return cAbstractAgentAssignment_0; }
		
		//[AbstractAgent]
		public CrossReference getAbstractAgentAbstractAgentCrossReference_0_0() { return cAbstractAgentAbstractAgentCrossReference_0_0; }
		
		//ID
		public RuleCall getAbstractAgentAbstractAgentIDTerminalRuleCall_0_0_1() { return cAbstractAgentAbstractAgentIDTerminalRuleCall_0_0_1; }
		
		//(array?='[' index=UnsignedInt ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//array?='['
		public Assignment getArrayAssignment_1_0() { return cArrayAssignment_1_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_1_0_0() { return cArrayLeftSquareBracketKeyword_1_0_0; }
		
		//index=UnsignedInt
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }
		
		//UnsignedInt
		public RuleCall getIndexUnsignedIntParserRuleCall_1_1_0() { return cIndexUnsignedIntParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//('.' siteInstance=SiteInstance)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//siteInstance=SiteInstance
		public Assignment getSiteInstanceAssignment_2_1() { return cSiteInstanceAssignment_2_1; }
		
		//SiteInstance
		public RuleCall getSiteInstanceSiteInstanceParserRuleCall_2_1_0() { return cSiteInstanceSiteInstanceParserRuleCall_2_1_0; }
	}
	public class SiteInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.SiteInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSiteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSiteSiteCrossReference_0_0 = (CrossReference)cSiteAssignment_0.eContents().get(0);
		private final RuleCall cSiteSiteIDTerminalRuleCall_0_0_1 = (RuleCall)cSiteSiteCrossReference_0_0.eContents().get(1);
		private final Assignment cSiteStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSiteStateSiteInstanceStateParserRuleCall_1_0 = (RuleCall)cSiteStateAssignment_1.eContents().get(0);
		
		//SiteInstance:
		//	site=[Site] siteState=SiteInstanceState?;
		@Override public ParserRule getRule() { return rule; }
		
		//site=[Site] siteState=SiteInstanceState?
		public Group getGroup() { return cGroup; }
		
		//site=[Site]
		public Assignment getSiteAssignment_0() { return cSiteAssignment_0; }
		
		//[Site]
		public CrossReference getSiteSiteCrossReference_0_0() { return cSiteSiteCrossReference_0_0; }
		
		//ID
		public RuleCall getSiteSiteIDTerminalRuleCall_0_0_1() { return cSiteSiteIDTerminalRuleCall_0_0_1; }
		
		//siteState=SiteInstanceState?
		public Assignment getSiteStateAssignment_1() { return cSiteStateAssignment_1; }
		
		//SiteInstanceState
		public RuleCall getSiteStateSiteInstanceStateParserRuleCall_1_0() { return cSiteStateSiteInstanceStateParserRuleCall_1_0; }
	}
	public class SiteInstanceStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.SiteInstanceState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateSiteStateCrossReference_1_0 = (CrossReference)cStateAssignment_1.eContents().get(0);
		private final RuleCall cStateSiteStateIDTerminalRuleCall_1_0_1 = (RuleCall)cStateSiteStateCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SiteInstanceState:
		//	'(' state=[SiteState] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' state=[SiteState] ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//state=[SiteState]
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//[SiteState]
		public CrossReference getStateSiteStateCrossReference_1_0() { return cStateSiteStateCrossReference_1_0; }
		
		//ID
		public RuleCall getStateSiteStateIDTerminalRuleCall_1_0_1() { return cStateSiteStateIDTerminalRuleCall_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueArithmeticExprParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Variable:
		//	'var' name=ID '=' value=ArithmeticExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' value=ArithmeticExpr
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=ArithmeticExpr
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ArithmeticExpr
		public RuleCall getValueArithmeticExprParserRuleCall_3_0() { return cValueArithmeticExprParserRuleCall_3_0; }
	}
	public class InitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Initialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadInitialisationHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyInitialisationBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		////Needs to be that way for recursive resolve of arithmetic expression
		//Initialisation:
		//	head=InitialisationHead body=InitialisationBody;
		@Override public ParserRule getRule() { return rule; }
		
		//head=InitialisationHead body=InitialisationBody
		public Group getGroup() { return cGroup; }
		
		//head=InitialisationHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }
		
		//InitialisationHead
		public RuleCall getHeadInitialisationHeadParserRuleCall_0_0() { return cHeadInitialisationHeadParserRuleCall_0_0; }
		
		//body=InitialisationBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//InitialisationBody
		public RuleCall getBodyInitialisationBodyParserRuleCall_1_0() { return cBodyInitialisationBodyParserRuleCall_1_0; }
	}
	public class InitialisationHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.InitialisationHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCntAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCntArithmeticExprParserRuleCall_1_0 = (RuleCall)cCntAssignment_1.eContents().get(0);
		
		//InitialisationHead:
		//	'init' cnt=ArithmeticExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//'init' cnt=ArithmeticExpr
		public Group getGroup() { return cGroup; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//cnt=ArithmeticExpr
		public Assignment getCntAssignment_1() { return cCntAssignment_1; }
		
		//ArithmeticExpr
		public RuleCall getCntArithmeticExprParserRuleCall_1_0() { return cCntArithmeticExprParserRuleCall_1_0; }
	}
	public class InitialisationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.InitialisationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureSignatureParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//InitialisationBody:
		//	signature=Signature? ':' pattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//signature=Signature? ':' pattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//signature=Signature?
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_0_0() { return cSignatureSignatureParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
	}
	public class ObservableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Observable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObserveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyObservableBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Observable:
		//	'observe' name=ID body=ObservableBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'observe' name=ID body=ObservableBody
		public Group getGroup() { return cGroup; }
		
		//'observe'
		public Keyword getObserveKeyword_0() { return cObserveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//body=ObservableBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ObservableBody
		public RuleCall getBodyObservableBodyParserRuleCall_2_0() { return cBodyObservableBodyParserRuleCall_2_0; }
	}
	public class ObservableBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ObservableBody");
		private final RuleCall cObservablePatternParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ObservableBody:
		//	ObservablePattern // | ObservableArithmetic
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ObservablePattern
		public RuleCall getObservablePatternParserRuleCall() { return cObservablePatternParserRuleCall; }
	}
	public class ObservableArithmeticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ObservableArithmetic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprArithmeticExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ObservableArithmetic:
		//	':' expr=ArithmeticExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//':' expr=ArithmeticExpr
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//expr=ArithmeticExpr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ArithmeticExpr
		public RuleCall getExprArithmeticExprParserRuleCall_1_0() { return cExprArithmeticExprParserRuleCall_1_0; }
	}
	public class ObservablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ObservablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureSignatureParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		////TODO: Introduce observableHead
		//ObservablePattern:
		//	signature=Signature? ':' pattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//signature=Signature? ':' pattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//signature=Signature?
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_0_0() { return cSignatureSignatureParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Command");
		private final RuleCall cTerminateCommandParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Command:
		//	TerminateCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminateCommand
		public RuleCall getTerminateCommandParserRuleCall() { return cTerminateCommandParserRuleCall; }
	}
	public class TerminateCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.TerminateCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTerminateBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TerminateCommand:
		//	'terminate' TerminateBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'terminate' TerminateBody
		public Group getGroup() { return cGroup; }
		
		//'terminate'
		public Keyword getTerminateKeyword_0() { return cTerminateKeyword_0; }
		
		//TerminateBody
		public RuleCall getTerminateBodyParserRuleCall_1() { return cTerminateBodyParserRuleCall_1; }
	}
	public class TerminateBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.TerminateBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminateTimeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTerminateIterationsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTerminateCountParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TerminateBody:
		//	TerminateTime | TerminateIterations | TerminateCount;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminateTime | TerminateIterations | TerminateCount
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TerminateTime
		public RuleCall getTerminateTimeParserRuleCall_0() { return cTerminateTimeParserRuleCall_0; }
		
		//TerminateIterations
		public RuleCall getTerminateIterationsParserRuleCall_1() { return cTerminateIterationsParserRuleCall_1; }
		
		//TerminateCount
		public RuleCall getTerminateCountParserRuleCall_2() { return cTerminateCountParserRuleCall_2; }
	}
	public class TerminateTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.TerminateTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeArithmeticExprParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		
		////TODO: Validation for wrong number formats (e.g. float in iterations) in commands
		//TerminateTime:
		//	'time' '=' time=ArithmeticExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//'time' '=' time=ArithmeticExpr
		public Group getGroup() { return cGroup; }
		
		//'time'
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//time=ArithmeticExpr
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//ArithmeticExpr
		public RuleCall getTimeArithmeticExprParserRuleCall_2_0() { return cTimeArithmeticExprParserRuleCall_2_0; }
	}
	public class TerminateIterationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.TerminateIterations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIterationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIterationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIterationsArithmeticExprParserRuleCall_2_0 = (RuleCall)cIterationsAssignment_2.eContents().get(0);
		
		//TerminateIterations:
		//	'iterations' '=' iterations=ArithmeticExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//'iterations' '=' iterations=ArithmeticExpr
		public Group getGroup() { return cGroup; }
		
		//'iterations'
		public Keyword getIterationsKeyword_0() { return cIterationsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//iterations=ArithmeticExpr
		public Assignment getIterationsAssignment_2() { return cIterationsAssignment_2; }
		
		//ArithmeticExpr
		public RuleCall getIterationsArithmeticExprParserRuleCall_2_0() { return cIterationsArithmeticExprParserRuleCall_2_0; }
	}
	public class TerminateCountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.TerminateCount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignatureAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureSignatureParserRuleCall_0_0_0 = (RuleCall)cSignatureAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		private final Keyword cMatchesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCntAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCntArithmeticExprParserRuleCall_4_0 = (RuleCall)cCntAssignment_4.eContents().get(0);
		
		//TerminateCount:
		//	(signature=Signature ':')? pattern=Pattern 'matches' '=' cnt=ArithmeticExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(signature=Signature ':')? pattern=Pattern 'matches' '=' cnt=ArithmeticExpr
		public Group getGroup() { return cGroup; }
		
		//(signature=Signature ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_0_0() { return cSignatureAssignment_0_0; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_0_0_0() { return cSignatureSignatureParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0() { return cPatternPatternParserRuleCall_1_0; }
		
		//'matches'
		public Keyword getMatchesKeyword_2() { return cMatchesKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//cnt=ArithmeticExpr
		public Assignment getCntAssignment_4() { return cCntAssignment_4; }
		
		//ArithmeticExpr
		public RuleCall getCntArithmeticExprParserRuleCall_4_0() { return cCntArithmeticExprParserRuleCall_4_0; }
	}
	public class ArithmeticExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ArithmeticExpr");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////-------------------------------------------Arithmetic Part from here on-------------------------------------------
		//ArithmeticExpr:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition ArithmeticExpr:
		//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cPowLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication ArithmeticExpr:
		//	PrimaryExpr (({Multi.left=current} '*' | {Div.left=current} '/' | {Pow.left=current} '^') right=PrimaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr (({Multi.left=current} '*' | {Div.left=current} '/' | {Pow.left=current} '^') right=PrimaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0() { return cPrimaryExprParserRuleCall_0; }
		
		//(({Multi.left=current} '*' | {Div.left=current} '/' | {Pow.left=current} '^') right=PrimaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Multi.left=current} '*' | {Div.left=current} '/' | {Pow.left=current} '^')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Multi.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//{Pow.left=current} '^'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Pow.left=current}
		public Action getPowLeftAction_1_0_2_0() { return cPowLeftAction_1_0_2_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0_2_1() { return cCircumflexAccentKeyword_1_0_2_1; }
		
		//right=PrimaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpr
		public RuleCall getRightPrimaryExprParserRuleCall_1_1_0() { return cRightPrimaryExprParserRuleCall_1_1_0; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cArithmeticExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueArithmeticTypeParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFunctionCallAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cFuncAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFuncMathFuncEnumRuleCall_2_1_0 = (RuleCall)cFuncAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExprAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExprArithmeticExprParserRuleCall_2_3_0 = (RuleCall)cExprAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVarRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefVariableCrossReference_3_1_0.eContents().get(1);
		
		//PrimaryExpr ArithmeticExpr:
		//	'(' ArithmeticExpr ')' | {NumberLiteral} value=ArithmeticType | {FunctionCall} func=MathFunc '(' expr=ArithmeticExpr
		//	')' | {VarRef} ref=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ArithmeticExpr ')' | {NumberLiteral} value=ArithmeticType | {FunctionCall} func=MathFunc '(' expr=ArithmeticExpr ')'
		//| {VarRef} ref=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' ArithmeticExpr ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//ArithmeticExpr
		public RuleCall getArithmeticExprParserRuleCall_0_1() { return cArithmeticExprParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{NumberLiteral} value=ArithmeticType
		public Group getGroup_1() { return cGroup_1; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }
		
		//value=ArithmeticType
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//ArithmeticType
		public RuleCall getValueArithmeticTypeParserRuleCall_1_1_0() { return cValueArithmeticTypeParserRuleCall_1_1_0; }
		
		//{FunctionCall} func=MathFunc '(' expr=ArithmeticExpr ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_2_0() { return cFunctionCallAction_2_0; }
		
		//func=MathFunc
		public Assignment getFuncAssignment_2_1() { return cFuncAssignment_2_1; }
		
		//MathFunc
		public RuleCall getFuncMathFuncEnumRuleCall_2_1_0() { return cFuncMathFuncEnumRuleCall_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//expr=ArithmeticExpr
		public Assignment getExprAssignment_2_3() { return cExprAssignment_2_3; }
		
		//ArithmeticExpr
		public RuleCall getExprArithmeticExprParserRuleCall_2_3_0() { return cExprArithmeticExprParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//{VarRef} ref=[Variable]
		public Group getGroup_3() { return cGroup_3; }
		
		//{VarRef}
		public Action getVarRefAction_3_0() { return cVarRefAction_3_0; }
		
		//ref=[Variable]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_3_1_0() { return cRefVariableCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_3_1_0_1() { return cRefVariableIDTerminalRuleCall_3_1_0_1; }
	}
	public class ArithmeticTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ArithmeticType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnsignedIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedDoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSignedDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnsignedScientificDoubleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSignedScientificDoubleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////	ArithmeticType:
		////	UNSIGNED_INT | SIGNED_INT | UNSIGNED_DOUBLE | SIGNED_DOUBLE | UNSIGNED_SCIENTIFIC_DOUBLE | SIGNED_SCIENTIFIC_DOUBLE
		////;
		////terminal UNSIGNED_INT returns ecore::EInt:
		////	('0'..'9')+
		////;
		////terminal SIGNED_INT returns ecore::EInt:
		////	'-' ('0'..'9')+
		////;
		////
		////terminal UNSIGNED_DOUBLE returns ecore::EDouble:
		////	('0'..'9')*'.'('0'..'9')+
		////;
		////
		////terminal SIGNED_DOUBLE returns ecore::EDouble:
		////	'-' ('0'..'9')*'.'('0'..'9')+
		////;
		////
		////terminal UNSIGNED_SCIENTIFIC_DOUBLE returns ecore::EDouble:
		////	('0'..'9')+('.'('0'..'9')+)?'E'('0'..'9')+
		////;
		////
		////terminal SIGNED_SCIENTIFIC_DOUBLE returns ecore::EDouble:
		////	'-'('0'..'9')+('.'('0'..'9')+)?'E'('0'..'9')+
		////;
		//ArithmeticType ecore::EDouble:
		//	UnsignedInt | SignedInt | UnsignedDouble | SignedDouble | UnsignedScientificDouble | SignedScientificDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//UnsignedInt | SignedInt | UnsignedDouble | SignedDouble | UnsignedScientificDouble | SignedScientificDouble
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnsignedInt
		public RuleCall getUnsignedIntParserRuleCall_0() { return cUnsignedIntParserRuleCall_0; }
		
		//SignedInt
		public RuleCall getSignedIntParserRuleCall_1() { return cSignedIntParserRuleCall_1; }
		
		//UnsignedDouble
		public RuleCall getUnsignedDoubleParserRuleCall_2() { return cUnsignedDoubleParserRuleCall_2; }
		
		//SignedDouble
		public RuleCall getSignedDoubleParserRuleCall_3() { return cSignedDoubleParserRuleCall_3; }
		
		//UnsignedScientificDouble
		public RuleCall getUnsignedScientificDoubleParserRuleCall_4() { return cUnsignedScientificDoubleParserRuleCall_4; }
		
		//SignedScientificDouble
		public RuleCall getSignedScientificDoubleParserRuleCall_5() { return cSignedScientificDoubleParserRuleCall_5; }
	}
	public class SignedScientificDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.SignedScientificDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Keyword cEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cPlusSignKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//SignedScientificDouble ecore::EDouble:
		//	'-' (INT | NULL) ('.' (INT | NULL))? 'E' ('+' | '-')? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' (INT | NULL) ('.' (INT | NULL))? 'E' ('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_1_1() { return cNULLTerminalRuleCall_1_1; }
		
		//('.' (INT | NULL))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1_0() { return cINTTerminalRuleCall_2_1_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_2_1_1() { return cNULLTerminalRuleCall_2_1_1; }
		
		//'E'
		public Keyword getEKeyword_3() { return cEKeyword_3; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_0() { return cPlusSignKeyword_4_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}
	public class UnsignedScientificDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.UnsignedScientificDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//UnsignedScientificDouble ecore::EDouble:
		//	(INT | NULL) ('.' (INT | NULL))? 'E' ('+' | '-')? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT | NULL) ('.' (INT | NULL))? 'E' ('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_0_1() { return cNULLTerminalRuleCall_0_1; }
		
		//('.' (INT | NULL))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_1_1_1() { return cNULLTerminalRuleCall_1_1_1; }
		
		//'E'
		public Keyword getEKeyword_2() { return cEKeyword_2; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class UnsignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.UnsignedInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnsignedInt ecore::EInt:
		//	INT | NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | NULL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_1() { return cNULLTerminalRuleCall_1; }
	}
	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//SignedInt ecore::EInt:
		//	'-' (INT | NULL);
		@Override public ParserRule getRule() { return rule; }
		
		//'-' (INT | NULL)
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_1_1() { return cNULLTerminalRuleCall_1_1; }
	}
	public class UnsignedDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.UnsignedDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//UnsignedDouble ecore::EDouble:
		//	(INT | NULL) '.' (INT | NULL);
		@Override public ParserRule getRule() { return rule; }
		
		//(INT | NULL) '.' (INT | NULL)
		public Group getGroup() { return cGroup; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_0_1() { return cNULLTerminalRuleCall_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_2_1() { return cNULLTerminalRuleCall_2_1; }
	}
	public class SignedDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.SignedDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//SignedDouble ecore::EDouble:
		//	'-' (INT | NULL) '.' (INT | NULL);
		@Override public ParserRule getRule() { return rule; }
		
		//'-' (INT | NULL) '.' (INT | NULL)
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_1_1() { return cNULLTerminalRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//(INT | NULL)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_0() { return cINTTerminalRuleCall_3_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_3_1() { return cNULLTerminalRuleCall_3_1; }
	}
	
	public class MathFuncElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.MathFunc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSQRTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSQRTSqrtKeyword_0_0 = (Keyword)cSQRTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cABSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cABSAbsKeyword_1_0 = (Keyword)cABSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MathFunc:
		//	SQRT='sqrt' | ABS='abs';
		public EnumRule getRule() { return rule; }
		
		//SQRT='sqrt' | ABS='abs'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SQRT='sqrt'
		public EnumLiteralDeclaration getSQRTEnumLiteralDeclaration_0() { return cSQRTEnumLiteralDeclaration_0; }
		
		//'sqrt'
		public Keyword getSQRTSqrtKeyword_0_0() { return cSQRTSqrtKeyword_0_0; }
		
		//ABS='abs'
		public EnumLiteralDeclaration getABSEnumLiteralDeclaration_1() { return cABSEnumLiteralDeclaration_1; }
		
		//'abs'
		public Keyword getABSAbsKeyword_1_0() { return cABSAbsKeyword_1_0; }
	}
	public class RuleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.RuleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNIEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNIEqualsSignGreaterThanSignKeyword_0_0 = (Keyword)cUNIEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBIEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBILessThanSignEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cBIEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RuleType:
		//	UNI='=>' | BI='<=>';
		public EnumRule getRule() { return rule; }
		
		//UNI='=>' | BI='<=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNI='=>'
		public EnumLiteralDeclaration getUNIEnumLiteralDeclaration_0() { return cUNIEnumLiteralDeclaration_0; }
		
		//'=>'
		public Keyword getUNIEqualsSignGreaterThanSignKeyword_0_0() { return cUNIEqualsSignGreaterThanSignKeyword_0_0; }
		
		//BI='<=>'
		public EnumLiteralDeclaration getBIEnumLiteralDeclaration_1() { return cBIEnumLiteralDeclaration_1; }
		
		//'<=>'
		public Keyword getBILessThanSignEqualsSignGreaterThanSignKeyword_1_0() { return cBILessThanSignEqualsSignGreaterThanSignKeyword_1_0; }
	}
	public class BondTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.BondType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNBOUNDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNBOUNDSolidusSolidusKeyword_0_0 = (Keyword)cUNBOUNDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOUNDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOUNDPlusSignKeyword_1_0 = (Keyword)cBOUNDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BondType:
		//	UNBOUND='//' | BOUND='+';
		public EnumRule getRule() { return rule; }
		
		//UNBOUND='//' | BOUND='+'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNBOUND='//'
		public EnumLiteralDeclaration getUNBOUNDEnumLiteralDeclaration_0() { return cUNBOUNDEnumLiteralDeclaration_0; }
		
		//'//'
		public Keyword getUNBOUNDSolidusSolidusKeyword_0_0() { return cUNBOUNDSolidusSolidusKeyword_0_0; }
		
		//BOUND='+'
		public EnumLiteralDeclaration getBOUNDEnumLiteralDeclaration_1() { return cBOUNDEnumLiteralDeclaration_1; }
		
		//'+'
		public Keyword getBOUNDPlusSignKeyword_1_0() { return cBOUNDPlusSignKeyword_1_0; }
	}
	
	private final ReactionModelElements pReactionModel;
	private final ComponentElements pComponent;
	private final AgentElements pAgent;
	private final AgentDeclarationElements pAgentDeclaration;
	private final AgentInstanceElements pAgentInstance;
	private final SiteElements pSite;
	private final SiteStateElements pSiteState;
	private final ComplexElements pComplex;
	private final ComplexElementElements pComplexElement;
	private final SignatureElements pSignature;
	private final RuleElements pRule;
	private final RuleHeadElements pRuleHead;
	private final RuleBodyElements pRuleBody;
	private final RatesElements pRates;
	private final PatternElements pPattern;
	private final BondsElements pBonds;
	private final AbstractAgentElements pAbstractAgent;
	private final BondElements pBond;
	private final BondSideOrWildcardElements pBondSideOrWildcard;
	private final WildcardElements pWildcard;
	private final BondSideElements pBondSide;
	private final SiteInstanceElements pSiteInstance;
	private final SiteInstanceStateElements pSiteInstanceState;
	private final VariableElements pVariable;
	private final InitialisationElements pInitialisation;
	private final InitialisationHeadElements pInitialisationHead;
	private final InitialisationBodyElements pInitialisationBody;
	private final ObservableElements pObservable;
	private final ObservableBodyElements pObservableBody;
	private final ObservableArithmeticElements pObservableArithmetic;
	private final ObservablePatternElements pObservablePattern;
	private final CommandElements pCommand;
	private final TerminateCommandElements pTerminateCommand;
	private final TerminateBodyElements pTerminateBody;
	private final TerminateTimeElements pTerminateTime;
	private final TerminateIterationsElements pTerminateIterations;
	private final TerminateCountElements pTerminateCount;
	private final ArithmeticExprElements pArithmeticExpr;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryExprElements pPrimaryExpr;
	private final MathFuncElements eMathFunc;
	private final ArithmeticTypeElements pArithmeticType;
	private final SignedScientificDoubleElements pSignedScientificDouble;
	private final UnsignedScientificDoubleElements pUnsignedScientificDouble;
	private final UnsignedIntElements pUnsignedInt;
	private final SignedIntElements pSignedInt;
	private final UnsignedDoubleElements pUnsignedDouble;
	private final SignedDoubleElements pSignedDouble;
	private final RuleTypeElements eRuleType;
	private final BondTypeElements eBondType;
	private final TerminalRule tANYTHING;
	private final TerminalRule tNULL;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tNEWLINE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReactionLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pReactionModel = new ReactionModelElements();
		this.pComponent = new ComponentElements();
		this.pAgent = new AgentElements();
		this.pAgentDeclaration = new AgentDeclarationElements();
		this.pAgentInstance = new AgentInstanceElements();
		this.pSite = new SiteElements();
		this.pSiteState = new SiteStateElements();
		this.pComplex = new ComplexElements();
		this.pComplexElement = new ComplexElementElements();
		this.pSignature = new SignatureElements();
		this.pRule = new RuleElements();
		this.pRuleHead = new RuleHeadElements();
		this.pRuleBody = new RuleBodyElements();
		this.pRates = new RatesElements();
		this.pPattern = new PatternElements();
		this.pBonds = new BondsElements();
		this.pAbstractAgent = new AbstractAgentElements();
		this.pBond = new BondElements();
		this.pBondSideOrWildcard = new BondSideOrWildcardElements();
		this.pWildcard = new WildcardElements();
		this.pBondSide = new BondSideElements();
		this.pSiteInstance = new SiteInstanceElements();
		this.pSiteInstanceState = new SiteInstanceStateElements();
		this.pVariable = new VariableElements();
		this.pInitialisation = new InitialisationElements();
		this.pInitialisationHead = new InitialisationHeadElements();
		this.pInitialisationBody = new InitialisationBodyElements();
		this.pObservable = new ObservableElements();
		this.pObservableBody = new ObservableBodyElements();
		this.pObservableArithmetic = new ObservableArithmeticElements();
		this.pObservablePattern = new ObservablePatternElements();
		this.pCommand = new CommandElements();
		this.pTerminateCommand = new TerminateCommandElements();
		this.pTerminateBody = new TerminateBodyElements();
		this.pTerminateTime = new TerminateTimeElements();
		this.pTerminateIterations = new TerminateIterationsElements();
		this.pTerminateCount = new TerminateCountElements();
		this.pArithmeticExpr = new ArithmeticExprElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.eMathFunc = new MathFuncElements();
		this.pArithmeticType = new ArithmeticTypeElements();
		this.pSignedScientificDouble = new SignedScientificDoubleElements();
		this.pUnsignedScientificDouble = new UnsignedScientificDoubleElements();
		this.pUnsignedInt = new UnsignedIntElements();
		this.pSignedInt = new SignedIntElements();
		this.pUnsignedDouble = new UnsignedDoubleElements();
		this.pSignedDouble = new SignedDoubleElements();
		this.eRuleType = new RuleTypeElements();
		this.eBondType = new BondTypeElements();
		this.tANYTHING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.ANYTHING");
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.NULL");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.SL_COMMENT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.reaction.dsl.ReactionLanguage.NEWLINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.reaction.dsl.ReactionLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ReactionModel:
	//	(elements+=Component SL_COMMENT? (NEWLINE elements+=Component)*)*;
	public ReactionModelElements getReactionModelAccess() {
		return pReactionModel;
	}
	
	public ParserRule getReactionModelRule() {
		return getReactionModelAccess().getRule();
	}
	
	//Component:
	//	AgentDeclaration | Rule | Complex | Initialisation | Observable | Variable | Command;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Agent:
	//	name=ID (':' sites+=Site (',' sites+=Site)*)?;
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//AgentDeclaration:
	//	'agent' declaredAgents+=Agent (';' declaredAgents+=Agent)*;
	public AgentDeclarationElements getAgentDeclarationAccess() {
		return pAgentDeclaration;
	}
	
	public ParserRule getAgentDeclarationRule() {
		return getAgentDeclarationAccess().getRule();
	}
	
	//AgentInstance:
	//	name=ID ':' instanceOf=[Agent] (array?='[' size=INT ']')?;
	public AgentInstanceElements getAgentInstanceAccess() {
		return pAgentInstance;
	}
	
	public ParserRule getAgentInstanceRule() {
		return getAgentInstanceAccess().getRule();
	}
	
	//Site:
	//	name=ID ('(' states+=SiteState (',' states+=SiteState)* ')')?;
	public SiteElements getSiteAccess() {
		return pSite;
	}
	
	public ParserRule getSiteRule() {
		return getSiteAccess().getRule();
	}
	
	//SiteState:
	//	name=ID;
	public SiteStateElements getSiteStateAccess() {
		return pSiteState;
	}
	
	public ParserRule getSiteStateRule() {
		return getSiteStateAccess().getRule();
	}
	
	//Complex:
	//	'complex' signature=Signature '{'
	//	elements+=ComplexElement*
	//	'}';
	public ComplexElements getComplexAccess() {
		return pComplex;
	}
	
	public ParserRule getComplexRule() {
		return getComplexAccess().getRule();
	}
	
	//ComplexElement:
	//	Complex | Rule | Variable | Observable;
	public ComplexElementElements getComplexElementAccess() {
		return pComplexElement;
	}
	
	public ParserRule getComplexElementRule() {
		return getComplexElementAccess().getRule();
	}
	
	//Signature:
	//	'(' instances+=AgentInstance (',' instances+=AgentInstance)* ')';
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Rule:
	//	'rule' head=RuleHead body=RuleBody;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//RuleHead:
	//	name=ID signature=Signature? ':';
	public RuleHeadElements getRuleHeadAccess() {
		return pRuleHead;
	}
	
	public ParserRule getRuleHeadRule() {
		return getRuleHeadAccess().getRule();
	}
	
	//RuleBody:
	//	lhs=Pattern ruleType=RuleType rhs=Pattern rates=Rates;
	public RuleBodyElements getRuleBodyAccess() {
		return pRuleBody;
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}
	
	//Rates:
	//	'@' rateForward=ArithmeticExpr (rateBackwardSet?=',' rateBackward=ArithmeticExpr)?;
	public RatesElements getRatesAccess() {
		return pRates;
	}
	
	public ParserRule getRatesRule() {
		return getRatesAccess().getRule();
	}
	
	//Pattern:
	//	{BlankPattern} '_' | Bonds;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Bonds:
	//	bonds+=Bond (',' bonds+=Bond)*;
	public BondsElements getBondsAccess() {
		return pBonds;
	}
	
	public ParserRule getBondsRule() {
		return getBondsAccess().getRule();
	}
	
	//AbstractAgent:
	//	Agent | AgentInstance;
	public AbstractAgentElements getAbstractAgentAccess() {
		return pAbstractAgent;
	}
	
	public ParserRule getAbstractAgentRule() {
		return getAbstractAgentAccess().getRule();
	}
	
	//Bond:
	//	left=BondSide (bondType=BondType right=BondSideOrWildcard)?;
	public BondElements getBondAccess() {
		return pBond;
	}
	
	public ParserRule getBondRule() {
		return getBondAccess().getRule();
	}
	
	//BondSideOrWildcard:
	//	BondSide | wildcard=Wildcard;
	public BondSideOrWildcardElements getBondSideOrWildcardAccess() {
		return pBondSideOrWildcard;
	}
	
	public ParserRule getBondSideOrWildcardRule() {
		return getBondSideOrWildcardAccess().getRule();
	}
	
	//Wildcard:
	//	anything?=ANYTHING | nothing?=NULL;
	public WildcardElements getWildcardAccess() {
		return pWildcard;
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}
	
	//BondSide:
	//	abstractAgent=[AbstractAgent] (array?='[' index=UnsignedInt ']')? ('.' siteInstance=SiteInstance)?;
	public BondSideElements getBondSideAccess() {
		return pBondSide;
	}
	
	public ParserRule getBondSideRule() {
		return getBondSideAccess().getRule();
	}
	
	//SiteInstance:
	//	site=[Site] siteState=SiteInstanceState?;
	public SiteInstanceElements getSiteInstanceAccess() {
		return pSiteInstance;
	}
	
	public ParserRule getSiteInstanceRule() {
		return getSiteInstanceAccess().getRule();
	}
	
	//SiteInstanceState:
	//	'(' state=[SiteState] ')';
	public SiteInstanceStateElements getSiteInstanceStateAccess() {
		return pSiteInstanceState;
	}
	
	public ParserRule getSiteInstanceStateRule() {
		return getSiteInstanceStateAccess().getRule();
	}
	
	//Variable:
	//	'var' name=ID '=' value=ArithmeticExpr;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////Needs to be that way for recursive resolve of arithmetic expression
	//Initialisation:
	//	head=InitialisationHead body=InitialisationBody;
	public InitialisationElements getInitialisationAccess() {
		return pInitialisation;
	}
	
	public ParserRule getInitialisationRule() {
		return getInitialisationAccess().getRule();
	}
	
	//InitialisationHead:
	//	'init' cnt=ArithmeticExpr;
	public InitialisationHeadElements getInitialisationHeadAccess() {
		return pInitialisationHead;
	}
	
	public ParserRule getInitialisationHeadRule() {
		return getInitialisationHeadAccess().getRule();
	}
	
	//InitialisationBody:
	//	signature=Signature? ':' pattern=Pattern;
	public InitialisationBodyElements getInitialisationBodyAccess() {
		return pInitialisationBody;
	}
	
	public ParserRule getInitialisationBodyRule() {
		return getInitialisationBodyAccess().getRule();
	}
	
	//Observable:
	//	'observe' name=ID body=ObservableBody;
	public ObservableElements getObservableAccess() {
		return pObservable;
	}
	
	public ParserRule getObservableRule() {
		return getObservableAccess().getRule();
	}
	
	//ObservableBody:
	//	ObservablePattern // | ObservableArithmetic
	//;
	public ObservableBodyElements getObservableBodyAccess() {
		return pObservableBody;
	}
	
	public ParserRule getObservableBodyRule() {
		return getObservableBodyAccess().getRule();
	}
	
	//ObservableArithmetic:
	//	':' expr=ArithmeticExpr;
	public ObservableArithmeticElements getObservableArithmeticAccess() {
		return pObservableArithmetic;
	}
	
	public ParserRule getObservableArithmeticRule() {
		return getObservableArithmeticAccess().getRule();
	}
	
	////TODO: Introduce observableHead
	//ObservablePattern:
	//	signature=Signature? ':' pattern=Pattern;
	public ObservablePatternElements getObservablePatternAccess() {
		return pObservablePattern;
	}
	
	public ParserRule getObservablePatternRule() {
		return getObservablePatternAccess().getRule();
	}
	
	//Command:
	//	TerminateCommand;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//TerminateCommand:
	//	'terminate' TerminateBody;
	public TerminateCommandElements getTerminateCommandAccess() {
		return pTerminateCommand;
	}
	
	public ParserRule getTerminateCommandRule() {
		return getTerminateCommandAccess().getRule();
	}
	
	//TerminateBody:
	//	TerminateTime | TerminateIterations | TerminateCount;
	public TerminateBodyElements getTerminateBodyAccess() {
		return pTerminateBody;
	}
	
	public ParserRule getTerminateBodyRule() {
		return getTerminateBodyAccess().getRule();
	}
	
	////TODO: Validation for wrong number formats (e.g. float in iterations) in commands
	//TerminateTime:
	//	'time' '=' time=ArithmeticExpr;
	public TerminateTimeElements getTerminateTimeAccess() {
		return pTerminateTime;
	}
	
	public ParserRule getTerminateTimeRule() {
		return getTerminateTimeAccess().getRule();
	}
	
	//TerminateIterations:
	//	'iterations' '=' iterations=ArithmeticExpr;
	public TerminateIterationsElements getTerminateIterationsAccess() {
		return pTerminateIterations;
	}
	
	public ParserRule getTerminateIterationsRule() {
		return getTerminateIterationsAccess().getRule();
	}
	
	//TerminateCount:
	//	(signature=Signature ':')? pattern=Pattern 'matches' '=' cnt=ArithmeticExpr;
	public TerminateCountElements getTerminateCountAccess() {
		return pTerminateCount;
	}
	
	public ParserRule getTerminateCountRule() {
		return getTerminateCountAccess().getRule();
	}
	
	////-------------------------------------------Arithmetic Part from here on-------------------------------------------
	//ArithmeticExpr:
	//	Addition;
	public ArithmeticExprElements getArithmeticExprAccess() {
		return pArithmeticExpr;
	}
	
	public ParserRule getArithmeticExprRule() {
		return getArithmeticExprAccess().getRule();
	}
	
	//Addition ArithmeticExpr:
	//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication ArithmeticExpr:
	//	PrimaryExpr (({Multi.left=current} '*' | {Div.left=current} '/' | {Pow.left=current} '^') right=PrimaryExpr)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//PrimaryExpr ArithmeticExpr:
	//	'(' ArithmeticExpr ')' | {NumberLiteral} value=ArithmeticType | {FunctionCall} func=MathFunc '(' expr=ArithmeticExpr
	//	')' | {VarRef} ref=[Variable];
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//enum MathFunc:
	//	SQRT='sqrt' | ABS='abs';
	public MathFuncElements getMathFuncAccess() {
		return eMathFunc;
	}
	
	public EnumRule getMathFuncRule() {
		return getMathFuncAccess().getRule();
	}
	
	////	ArithmeticType:
	////	UNSIGNED_INT | SIGNED_INT | UNSIGNED_DOUBLE | SIGNED_DOUBLE | UNSIGNED_SCIENTIFIC_DOUBLE | SIGNED_SCIENTIFIC_DOUBLE
	////;
	////terminal UNSIGNED_INT returns ecore::EInt:
	////	('0'..'9')+
	////;
	////terminal SIGNED_INT returns ecore::EInt:
	////	'-' ('0'..'9')+
	////;
	////
	////terminal UNSIGNED_DOUBLE returns ecore::EDouble:
	////	('0'..'9')*'.'('0'..'9')+
	////;
	////
	////terminal SIGNED_DOUBLE returns ecore::EDouble:
	////	'-' ('0'..'9')*'.'('0'..'9')+
	////;
	////
	////terminal UNSIGNED_SCIENTIFIC_DOUBLE returns ecore::EDouble:
	////	('0'..'9')+('.'('0'..'9')+)?'E'('0'..'9')+
	////;
	////
	////terminal SIGNED_SCIENTIFIC_DOUBLE returns ecore::EDouble:
	////	'-'('0'..'9')+('.'('0'..'9')+)?'E'('0'..'9')+
	////;
	//ArithmeticType ecore::EDouble:
	//	UnsignedInt | SignedInt | UnsignedDouble | SignedDouble | UnsignedScientificDouble | SignedScientificDouble;
	public ArithmeticTypeElements getArithmeticTypeAccess() {
		return pArithmeticType;
	}
	
	public ParserRule getArithmeticTypeRule() {
		return getArithmeticTypeAccess().getRule();
	}
	
	//SignedScientificDouble ecore::EDouble:
	//	'-' (INT | NULL) ('.' (INT | NULL))? 'E' ('+' | '-')? INT;
	public SignedScientificDoubleElements getSignedScientificDoubleAccess() {
		return pSignedScientificDouble;
	}
	
	public ParserRule getSignedScientificDoubleRule() {
		return getSignedScientificDoubleAccess().getRule();
	}
	
	//UnsignedScientificDouble ecore::EDouble:
	//	(INT | NULL) ('.' (INT | NULL))? 'E' ('+' | '-')? INT;
	public UnsignedScientificDoubleElements getUnsignedScientificDoubleAccess() {
		return pUnsignedScientificDouble;
	}
	
	public ParserRule getUnsignedScientificDoubleRule() {
		return getUnsignedScientificDoubleAccess().getRule();
	}
	
	//UnsignedInt ecore::EInt:
	//	INT | NULL;
	public UnsignedIntElements getUnsignedIntAccess() {
		return pUnsignedInt;
	}
	
	public ParserRule getUnsignedIntRule() {
		return getUnsignedIntAccess().getRule();
	}
	
	//SignedInt ecore::EInt:
	//	'-' (INT | NULL);
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}
	
	//UnsignedDouble ecore::EDouble:
	//	(INT | NULL) '.' (INT | NULL);
	public UnsignedDoubleElements getUnsignedDoubleAccess() {
		return pUnsignedDouble;
	}
	
	public ParserRule getUnsignedDoubleRule() {
		return getUnsignedDoubleAccess().getRule();
	}
	
	//SignedDouble ecore::EDouble:
	//	'-' (INT | NULL) '.' (INT | NULL);
	public SignedDoubleElements getSignedDoubleAccess() {
		return pSignedDouble;
	}
	
	public ParserRule getSignedDoubleRule() {
		return getSignedDoubleAccess().getRule();
	}
	
	//enum RuleType:
	//	UNI='=>' | BI='<=>';
	public RuleTypeElements getRuleTypeAccess() {
		return eRuleType;
	}
	
	public EnumRule getRuleTypeRule() {
		return getRuleTypeAccess().getRule();
	}
	
	//enum BondType:
	//	UNBOUND='//' | BOUND='+';
	public BondTypeElements getBondTypeAccess() {
		return eBondType;
	}
	
	public EnumRule getBondTypeRule() {
		return getBondTypeAccess().getRule();
	}
	
	//terminal ANYTHING:
	//	'?';
	public TerminalRule getANYTHINGRule() {
		return tANYTHING;
	}
	
	//terminal NULL:
	//	'0';
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal NEWLINE:
	//	'\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
