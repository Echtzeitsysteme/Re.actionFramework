/**
 * generated by Xtext 2.20.0
 */
package org.reaction.dsl.reactionLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.reaction.dsl.reactionLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ReactionLanguageFactoryImpl extends EFactoryImpl implements ReactionLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ReactionLanguageFactory init()
  {
    try
    {
      ReactionLanguageFactory theReactionLanguageFactory = (ReactionLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(ReactionLanguagePackage.eNS_URI);
      if (theReactionLanguageFactory != null)
      {
        return theReactionLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ReactionLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReactionLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ReactionLanguagePackage.REACTION_MODEL: return createReactionModel();
      case ReactionLanguagePackage.COMPONENT: return createComponent();
      case ReactionLanguagePackage.AGENT: return createAgent();
      case ReactionLanguagePackage.AGENT_DECLARATION: return createAgentDeclaration();
      case ReactionLanguagePackage.AGENT_INSTANCE: return createAgentInstance();
      case ReactionLanguagePackage.SITE: return createSite();
      case ReactionLanguagePackage.SITE_STATE: return createSiteState();
      case ReactionLanguagePackage.COMPLEX: return createComplex();
      case ReactionLanguagePackage.COMPLEX_ELEMENT: return createComplexElement();
      case ReactionLanguagePackage.SIGNATURE: return createSignature();
      case ReactionLanguagePackage.RULE: return createRule();
      case ReactionLanguagePackage.RULE_HEAD: return createRuleHead();
      case ReactionLanguagePackage.RULE_BODY: return createRuleBody();
      case ReactionLanguagePackage.RATES: return createRates();
      case ReactionLanguagePackage.PATTERN: return createPattern();
      case ReactionLanguagePackage.BONDS: return createBonds();
      case ReactionLanguagePackage.ABSTRACT_AGENT: return createAbstractAgent();
      case ReactionLanguagePackage.BOND: return createBond();
      case ReactionLanguagePackage.BOND_SIDE_OR_WILDCARD: return createBondSideOrWildcard();
      case ReactionLanguagePackage.WILDCARD: return createWildcard();
      case ReactionLanguagePackage.BOND_SIDE: return createBondSide();
      case ReactionLanguagePackage.SITE_INSTANCE: return createSiteInstance();
      case ReactionLanguagePackage.SITE_INSTANCE_STATE: return createSiteInstanceState();
      case ReactionLanguagePackage.VARIABLE: return createVariable();
      case ReactionLanguagePackage.INITIALISATION: return createInitialisation();
      case ReactionLanguagePackage.INITIALISATION_HEAD: return createInitialisationHead();
      case ReactionLanguagePackage.INITIALISATION_BODY: return createInitialisationBody();
      case ReactionLanguagePackage.OBSERVABLE: return createObservable();
      case ReactionLanguagePackage.OBSERVABLE_BODY: return createObservableBody();
      case ReactionLanguagePackage.OBSERVABLE_ARITHMETIC: return createObservableArithmetic();
      case ReactionLanguagePackage.OBSERVABLE_PATTERN: return createObservablePattern();
      case ReactionLanguagePackage.COMMAND: return createCommand();
      case ReactionLanguagePackage.TERMINATE_COMMAND: return createTerminateCommand();
      case ReactionLanguagePackage.TERMINATE_BODY: return createTerminateBody();
      case ReactionLanguagePackage.TERMINATE_TIME: return createTerminateTime();
      case ReactionLanguagePackage.TERMINATE_ITERATIONS: return createTerminateIterations();
      case ReactionLanguagePackage.TERMINATE_COUNT: return createTerminateCount();
      case ReactionLanguagePackage.ARITHMETIC_EXPR: return createArithmeticExpr();
      case ReactionLanguagePackage.BLANK_PATTERN: return createBlankPattern();
      case ReactionLanguagePackage.PLUS: return createPlus();
      case ReactionLanguagePackage.MINUS: return createMinus();
      case ReactionLanguagePackage.MULTI: return createMulti();
      case ReactionLanguagePackage.DIV: return createDiv();
      case ReactionLanguagePackage.POW: return createPow();
      case ReactionLanguagePackage.NUMBER_LITERAL: return createNumberLiteral();
      case ReactionLanguagePackage.FUNCTION_CALL: return createFunctionCall();
      case ReactionLanguagePackage.VAR_REF: return createVarRef();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReactionLanguagePackage.MATH_FUNC:
        return createMathFuncFromString(eDataType, initialValue);
      case ReactionLanguagePackage.RULE_TYPE:
        return createRuleTypeFromString(eDataType, initialValue);
      case ReactionLanguagePackage.BOND_TYPE:
        return createBondTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReactionLanguagePackage.MATH_FUNC:
        return convertMathFuncToString(eDataType, instanceValue);
      case ReactionLanguagePackage.RULE_TYPE:
        return convertRuleTypeToString(eDataType, instanceValue);
      case ReactionLanguagePackage.BOND_TYPE:
        return convertBondTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReactionModel createReactionModel()
  {
    ReactionModelImpl reactionModel = new ReactionModelImpl();
    return reactionModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Agent createAgent()
  {
    AgentImpl agent = new AgentImpl();
    return agent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgentDeclaration createAgentDeclaration()
  {
    AgentDeclarationImpl agentDeclaration = new AgentDeclarationImpl();
    return agentDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgentInstance createAgentInstance()
  {
    AgentInstanceImpl agentInstance = new AgentInstanceImpl();
    return agentInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Site createSite()
  {
    SiteImpl site = new SiteImpl();
    return site;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SiteState createSiteState()
  {
    SiteStateImpl siteState = new SiteStateImpl();
    return siteState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Complex createComplex()
  {
    ComplexImpl complex = new ComplexImpl();
    return complex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexElement createComplexElement()
  {
    ComplexElementImpl complexElement = new ComplexElementImpl();
    return complexElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signature createSignature()
  {
    SignatureImpl signature = new SignatureImpl();
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleHead createRuleHead()
  {
    RuleHeadImpl ruleHead = new RuleHeadImpl();
    return ruleHead;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleBody createRuleBody()
  {
    RuleBodyImpl ruleBody = new RuleBodyImpl();
    return ruleBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rates createRates()
  {
    RatesImpl rates = new RatesImpl();
    return rates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bonds createBonds()
  {
    BondsImpl bonds = new BondsImpl();
    return bonds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractAgent createAbstractAgent()
  {
    AbstractAgentImpl abstractAgent = new AbstractAgentImpl();
    return abstractAgent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bond createBond()
  {
    BondImpl bond = new BondImpl();
    return bond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BondSideOrWildcard createBondSideOrWildcard()
  {
    BondSideOrWildcardImpl bondSideOrWildcard = new BondSideOrWildcardImpl();
    return bondSideOrWildcard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wildcard createWildcard()
  {
    WildcardImpl wildcard = new WildcardImpl();
    return wildcard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BondSide createBondSide()
  {
    BondSideImpl bondSide = new BondSideImpl();
    return bondSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SiteInstance createSiteInstance()
  {
    SiteInstanceImpl siteInstance = new SiteInstanceImpl();
    return siteInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SiteInstanceState createSiteInstanceState()
  {
    SiteInstanceStateImpl siteInstanceState = new SiteInstanceStateImpl();
    return siteInstanceState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initialisation createInitialisation()
  {
    InitialisationImpl initialisation = new InitialisationImpl();
    return initialisation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialisationHead createInitialisationHead()
  {
    InitialisationHeadImpl initialisationHead = new InitialisationHeadImpl();
    return initialisationHead;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialisationBody createInitialisationBody()
  {
    InitialisationBodyImpl initialisationBody = new InitialisationBodyImpl();
    return initialisationBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Observable createObservable()
  {
    ObservableImpl observable = new ObservableImpl();
    return observable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObservableBody createObservableBody()
  {
    ObservableBodyImpl observableBody = new ObservableBodyImpl();
    return observableBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObservableArithmetic createObservableArithmetic()
  {
    ObservableArithmeticImpl observableArithmetic = new ObservableArithmeticImpl();
    return observableArithmetic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObservablePattern createObservablePattern()
  {
    ObservablePatternImpl observablePattern = new ObservablePatternImpl();
    return observablePattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TerminateCommand createTerminateCommand()
  {
    TerminateCommandImpl terminateCommand = new TerminateCommandImpl();
    return terminateCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TerminateBody createTerminateBody()
  {
    TerminateBodyImpl terminateBody = new TerminateBodyImpl();
    return terminateBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TerminateTime createTerminateTime()
  {
    TerminateTimeImpl terminateTime = new TerminateTimeImpl();
    return terminateTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TerminateIterations createTerminateIterations()
  {
    TerminateIterationsImpl terminateIterations = new TerminateIterationsImpl();
    return terminateIterations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TerminateCount createTerminateCount()
  {
    TerminateCountImpl terminateCount = new TerminateCountImpl();
    return terminateCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpr createArithmeticExpr()
  {
    ArithmeticExprImpl arithmeticExpr = new ArithmeticExprImpl();
    return arithmeticExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlankPattern createBlankPattern()
  {
    BlankPatternImpl blankPattern = new BlankPatternImpl();
    return blankPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multi createMulti()
  {
    MultiImpl multi = new MultiImpl();
    return multi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pow createPow()
  {
    PowImpl pow = new PowImpl();
    return pow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarRef createVarRef()
  {
    VarRefImpl varRef = new VarRefImpl();
    return varRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathFunc createMathFuncFromString(EDataType eDataType, String initialValue)
  {
    MathFunc result = MathFunc.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMathFuncToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleType createRuleTypeFromString(EDataType eDataType, String initialValue)
  {
    RuleType result = RuleType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRuleTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BondType createBondTypeFromString(EDataType eDataType, String initialValue)
  {
    BondType result = BondType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBondTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReactionLanguagePackage getReactionLanguagePackage()
  {
    return (ReactionLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ReactionLanguagePackage getPackage()
  {
    return ReactionLanguagePackage.eINSTANCE;
  }

} //ReactionLanguageFactoryImpl
