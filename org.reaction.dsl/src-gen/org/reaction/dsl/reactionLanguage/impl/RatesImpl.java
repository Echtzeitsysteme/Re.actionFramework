/**
 * generated by Xtext 2.20.0
 */
package org.reaction.dsl.reactionLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.reaction.dsl.reactionLanguage.ArithmeticExpr;
import org.reaction.dsl.reactionLanguage.Rates;
import org.reaction.dsl.reactionLanguage.ReactionLanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rates</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.reaction.dsl.reactionLanguage.impl.RatesImpl#getRateForward <em>Rate Forward</em>}</li>
 *   <li>{@link org.reaction.dsl.reactionLanguage.impl.RatesImpl#isRateBackwardSet <em>Rate Backward Set</em>}</li>
 *   <li>{@link org.reaction.dsl.reactionLanguage.impl.RatesImpl#getRateBackward <em>Rate Backward</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RatesImpl extends MinimalEObjectImpl.Container implements Rates
{
  /**
   * The cached value of the '{@link #getRateForward() <em>Rate Forward</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRateForward()
   * @generated
   * @ordered
   */
  protected ArithmeticExpr rateForward;

  /**
   * The default value of the '{@link #isRateBackwardSet() <em>Rate Backward Set</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRateBackwardSet()
   * @generated
   * @ordered
   */
  protected static final boolean RATE_BACKWARD_SET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRateBackwardSet() <em>Rate Backward Set</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRateBackwardSet()
   * @generated
   * @ordered
   */
  protected boolean rateBackwardSet = RATE_BACKWARD_SET_EDEFAULT;

  /**
   * The cached value of the '{@link #getRateBackward() <em>Rate Backward</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRateBackward()
   * @generated
   * @ordered
   */
  protected ArithmeticExpr rateBackward;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RatesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReactionLanguagePackage.Literals.RATES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpr getRateForward()
  {
    return rateForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRateForward(ArithmeticExpr newRateForward, NotificationChain msgs)
  {
    ArithmeticExpr oldRateForward = rateForward;
    rateForward = newRateForward;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReactionLanguagePackage.RATES__RATE_FORWARD, oldRateForward, newRateForward);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRateForward(ArithmeticExpr newRateForward)
  {
    if (newRateForward != rateForward)
    {
      NotificationChain msgs = null;
      if (rateForward != null)
        msgs = ((InternalEObject)rateForward).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReactionLanguagePackage.RATES__RATE_FORWARD, null, msgs);
      if (newRateForward != null)
        msgs = ((InternalEObject)newRateForward).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReactionLanguagePackage.RATES__RATE_FORWARD, null, msgs);
      msgs = basicSetRateForward(newRateForward, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactionLanguagePackage.RATES__RATE_FORWARD, newRateForward, newRateForward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRateBackwardSet()
  {
    return rateBackwardSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRateBackwardSet(boolean newRateBackwardSet)
  {
    boolean oldRateBackwardSet = rateBackwardSet;
    rateBackwardSet = newRateBackwardSet;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactionLanguagePackage.RATES__RATE_BACKWARD_SET, oldRateBackwardSet, rateBackwardSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpr getRateBackward()
  {
    return rateBackward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRateBackward(ArithmeticExpr newRateBackward, NotificationChain msgs)
  {
    ArithmeticExpr oldRateBackward = rateBackward;
    rateBackward = newRateBackward;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReactionLanguagePackage.RATES__RATE_BACKWARD, oldRateBackward, newRateBackward);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRateBackward(ArithmeticExpr newRateBackward)
  {
    if (newRateBackward != rateBackward)
    {
      NotificationChain msgs = null;
      if (rateBackward != null)
        msgs = ((InternalEObject)rateBackward).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReactionLanguagePackage.RATES__RATE_BACKWARD, null, msgs);
      if (newRateBackward != null)
        msgs = ((InternalEObject)newRateBackward).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReactionLanguagePackage.RATES__RATE_BACKWARD, null, msgs);
      msgs = basicSetRateBackward(newRateBackward, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactionLanguagePackage.RATES__RATE_BACKWARD, newRateBackward, newRateBackward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReactionLanguagePackage.RATES__RATE_FORWARD:
        return basicSetRateForward(null, msgs);
      case ReactionLanguagePackage.RATES__RATE_BACKWARD:
        return basicSetRateBackward(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReactionLanguagePackage.RATES__RATE_FORWARD:
        return getRateForward();
      case ReactionLanguagePackage.RATES__RATE_BACKWARD_SET:
        return isRateBackwardSet();
      case ReactionLanguagePackage.RATES__RATE_BACKWARD:
        return getRateBackward();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReactionLanguagePackage.RATES__RATE_FORWARD:
        setRateForward((ArithmeticExpr)newValue);
        return;
      case ReactionLanguagePackage.RATES__RATE_BACKWARD_SET:
        setRateBackwardSet((Boolean)newValue);
        return;
      case ReactionLanguagePackage.RATES__RATE_BACKWARD:
        setRateBackward((ArithmeticExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReactionLanguagePackage.RATES__RATE_FORWARD:
        setRateForward((ArithmeticExpr)null);
        return;
      case ReactionLanguagePackage.RATES__RATE_BACKWARD_SET:
        setRateBackwardSet(RATE_BACKWARD_SET_EDEFAULT);
        return;
      case ReactionLanguagePackage.RATES__RATE_BACKWARD:
        setRateBackward((ArithmeticExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReactionLanguagePackage.RATES__RATE_FORWARD:
        return rateForward != null;
      case ReactionLanguagePackage.RATES__RATE_BACKWARD_SET:
        return rateBackwardSet != RATE_BACKWARD_SET_EDEFAULT;
      case ReactionLanguagePackage.RATES__RATE_BACKWARD:
        return rateBackward != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (rateBackwardSet: ");
    result.append(rateBackwardSet);
    result.append(')');
    return result.toString();
  }

} //RatesImpl
