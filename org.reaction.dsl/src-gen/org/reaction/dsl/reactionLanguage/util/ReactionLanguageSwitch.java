/**
 * generated by Xtext 2.20.0
 */
package org.reaction.dsl.reactionLanguage.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.reaction.dsl.reactionLanguage.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.reaction.dsl.reactionLanguage.ReactionLanguagePackage
 * @generated
 */
public class ReactionLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ReactionLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReactionLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ReactionLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ReactionLanguagePackage.REACTION_MODEL:
      {
        ReactionModel reactionModel = (ReactionModel)theEObject;
        T result = caseReactionModel(reactionModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.COMPONENT:
      {
        Component component = (Component)theEObject;
        T result = caseComponent(component);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.AGENT:
      {
        Agent agent = (Agent)theEObject;
        T result = caseAgent(agent);
        if (result == null) result = caseAbstractAgent(agent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.AGENT_DECLARATION:
      {
        AgentDeclaration agentDeclaration = (AgentDeclaration)theEObject;
        T result = caseAgentDeclaration(agentDeclaration);
        if (result == null) result = caseComponent(agentDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.AGENT_INSTANCE:
      {
        AgentInstance agentInstance = (AgentInstance)theEObject;
        T result = caseAgentInstance(agentInstance);
        if (result == null) result = caseAbstractAgent(agentInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.SITE:
      {
        Site site = (Site)theEObject;
        T result = caseSite(site);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.SITE_STATE:
      {
        SiteState siteState = (SiteState)theEObject;
        T result = caseSiteState(siteState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.COMPLEX:
      {
        Complex complex = (Complex)theEObject;
        T result = caseComplex(complex);
        if (result == null) result = caseComponent(complex);
        if (result == null) result = caseComplexElement(complex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.COMPLEX_ELEMENT:
      {
        ComplexElement complexElement = (ComplexElement)theEObject;
        T result = caseComplexElement(complexElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.SIGNATURE:
      {
        Signature signature = (Signature)theEObject;
        T result = caseSignature(signature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.RULE:
      {
        Rule rule = (Rule)theEObject;
        T result = caseRule(rule);
        if (result == null) result = caseComponent(rule);
        if (result == null) result = caseComplexElement(rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.RULE_HEAD:
      {
        RuleHead ruleHead = (RuleHead)theEObject;
        T result = caseRuleHead(ruleHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.RULE_BODY:
      {
        RuleBody ruleBody = (RuleBody)theEObject;
        T result = caseRuleBody(ruleBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.RATES:
      {
        Rates rates = (Rates)theEObject;
        T result = caseRates(rates);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.BONDS:
      {
        Bonds bonds = (Bonds)theEObject;
        T result = caseBonds(bonds);
        if (result == null) result = casePattern(bonds);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.ABSTRACT_AGENT:
      {
        AbstractAgent abstractAgent = (AbstractAgent)theEObject;
        T result = caseAbstractAgent(abstractAgent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.BOND:
      {
        Bond bond = (Bond)theEObject;
        T result = caseBond(bond);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.BOND_SIDE_OR_WILDCARD:
      {
        BondSideOrWildcard bondSideOrWildcard = (BondSideOrWildcard)theEObject;
        T result = caseBondSideOrWildcard(bondSideOrWildcard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.WILDCARD:
      {
        Wildcard wildcard = (Wildcard)theEObject;
        T result = caseWildcard(wildcard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.BOND_SIDE:
      {
        BondSide bondSide = (BondSide)theEObject;
        T result = caseBondSide(bondSide);
        if (result == null) result = caseBondSideOrWildcard(bondSide);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.SITE_INSTANCE:
      {
        SiteInstance siteInstance = (SiteInstance)theEObject;
        T result = caseSiteInstance(siteInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.SITE_INSTANCE_STATE:
      {
        SiteInstanceState siteInstanceState = (SiteInstanceState)theEObject;
        T result = caseSiteInstanceState(siteInstanceState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = caseComponent(variable);
        if (result == null) result = caseComplexElement(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.INITIALISATION:
      {
        Initialisation initialisation = (Initialisation)theEObject;
        T result = caseInitialisation(initialisation);
        if (result == null) result = caseComponent(initialisation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.INITIALISATION_HEAD:
      {
        InitialisationHead initialisationHead = (InitialisationHead)theEObject;
        T result = caseInitialisationHead(initialisationHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.INITIALISATION_BODY:
      {
        InitialisationBody initialisationBody = (InitialisationBody)theEObject;
        T result = caseInitialisationBody(initialisationBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.OBSERVABLE:
      {
        Observable observable = (Observable)theEObject;
        T result = caseObservable(observable);
        if (result == null) result = caseComponent(observable);
        if (result == null) result = caseComplexElement(observable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.OBSERVABLE_BODY:
      {
        ObservableBody observableBody = (ObservableBody)theEObject;
        T result = caseObservableBody(observableBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.OBSERVABLE_ARITHMETIC:
      {
        ObservableArithmetic observableArithmetic = (ObservableArithmetic)theEObject;
        T result = caseObservableArithmetic(observableArithmetic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.OBSERVABLE_PATTERN:
      {
        ObservablePattern observablePattern = (ObservablePattern)theEObject;
        T result = caseObservablePattern(observablePattern);
        if (result == null) result = caseObservableBody(observablePattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.COMMAND:
      {
        Command command = (Command)theEObject;
        T result = caseCommand(command);
        if (result == null) result = caseComponent(command);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.TERMINATE_COMMAND:
      {
        TerminateCommand terminateCommand = (TerminateCommand)theEObject;
        T result = caseTerminateCommand(terminateCommand);
        if (result == null) result = caseCommand(terminateCommand);
        if (result == null) result = caseComponent(terminateCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.TERMINATE_BODY:
      {
        TerminateBody terminateBody = (TerminateBody)theEObject;
        T result = caseTerminateBody(terminateBody);
        if (result == null) result = caseTerminateCommand(terminateBody);
        if (result == null) result = caseCommand(terminateBody);
        if (result == null) result = caseComponent(terminateBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.TERMINATE_TIME:
      {
        TerminateTime terminateTime = (TerminateTime)theEObject;
        T result = caseTerminateTime(terminateTime);
        if (result == null) result = caseTerminateBody(terminateTime);
        if (result == null) result = caseTerminateCommand(terminateTime);
        if (result == null) result = caseCommand(terminateTime);
        if (result == null) result = caseComponent(terminateTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.TERMINATE_ITERATIONS:
      {
        TerminateIterations terminateIterations = (TerminateIterations)theEObject;
        T result = caseTerminateIterations(terminateIterations);
        if (result == null) result = caseTerminateBody(terminateIterations);
        if (result == null) result = caseTerminateCommand(terminateIterations);
        if (result == null) result = caseCommand(terminateIterations);
        if (result == null) result = caseComponent(terminateIterations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.TERMINATE_COUNT:
      {
        TerminateCount terminateCount = (TerminateCount)theEObject;
        T result = caseTerminateCount(terminateCount);
        if (result == null) result = caseTerminateBody(terminateCount);
        if (result == null) result = caseTerminateCommand(terminateCount);
        if (result == null) result = caseCommand(terminateCount);
        if (result == null) result = caseComponent(terminateCount);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.ARITHMETIC_EXPR:
      {
        ArithmeticExpr arithmeticExpr = (ArithmeticExpr)theEObject;
        T result = caseArithmeticExpr(arithmeticExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.BLANK_PATTERN:
      {
        BlankPattern blankPattern = (BlankPattern)theEObject;
        T result = caseBlankPattern(blankPattern);
        if (result == null) result = casePattern(blankPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseArithmeticExpr(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseArithmeticExpr(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.MULTI:
      {
        Multi multi = (Multi)theEObject;
        T result = caseMulti(multi);
        if (result == null) result = caseArithmeticExpr(multi);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.DIV:
      {
        Div div = (Div)theEObject;
        T result = caseDiv(div);
        if (result == null) result = caseArithmeticExpr(div);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.POW:
      {
        Pow pow = (Pow)theEObject;
        T result = casePow(pow);
        if (result == null) result = caseArithmeticExpr(pow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.NUMBER_LITERAL:
      {
        NumberLiteral numberLiteral = (NumberLiteral)theEObject;
        T result = caseNumberLiteral(numberLiteral);
        if (result == null) result = caseArithmeticExpr(numberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.FUNCTION_CALL:
      {
        FunctionCall functionCall = (FunctionCall)theEObject;
        T result = caseFunctionCall(functionCall);
        if (result == null) result = caseArithmeticExpr(functionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionLanguagePackage.VAR_REF:
      {
        VarRef varRef = (VarRef)theEObject;
        T result = caseVarRef(varRef);
        if (result == null) result = caseArithmeticExpr(varRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reaction Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reaction Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactionModel(ReactionModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponent(Component object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Agent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Agent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAgent(Agent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Agent Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Agent Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAgentDeclaration(AgentDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Agent Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Agent Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAgentInstance(AgentInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSite(Site object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSiteState(SiteState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplex(Complex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexElement(ComplexElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignature(Signature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRule(Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Head</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Head</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleHead(RuleHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleBody(RuleBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rates</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rates</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRates(Rates object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bonds</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bonds</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBonds(Bonds object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Agent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Agent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractAgent(AbstractAgent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bond</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bond</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBond(Bond object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bond Side Or Wildcard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bond Side Or Wildcard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBondSideOrWildcard(BondSideOrWildcard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Wildcard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Wildcard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWildcard(Wildcard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bond Side</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bond Side</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBondSide(BondSide object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSiteInstance(SiteInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site Instance State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site Instance State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSiteInstanceState(SiteInstanceState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initialisation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initialisation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialisation(Initialisation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initialisation Head</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initialisation Head</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialisationHead(InitialisationHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initialisation Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initialisation Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialisationBody(InitialisationBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Observable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Observable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObservable(Observable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Observable Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Observable Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObservableBody(ObservableBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Observable Arithmetic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Observable Arithmetic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObservableArithmetic(ObservableArithmetic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Observable Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Observable Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObservablePattern(ObservablePattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommand(Command object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminate Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminate Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminateCommand(TerminateCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminate Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminate Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminateBody(TerminateBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminate Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminate Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminateTime(TerminateTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminate Iterations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminate Iterations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminateIterations(TerminateIterations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminate Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminate Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminateCount(TerminateCount object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpr(ArithmeticExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Blank Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Blank Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlankPattern(BlankPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulti(Multi object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiv(Div object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePow(Pow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteral(NumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCall(FunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRef(VarRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ReactionLanguageSwitch
