/**
 * generated by Xtext 2.20.0
 */
package org.reaction.dsl.reactionLanguage.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.reaction.dsl.reactionLanguage.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.reaction.dsl.reactionLanguage.ReactionLanguagePackage
 * @generated
 */
public class ReactionLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ReactionLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReactionLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ReactionLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReactionLanguageSwitch<Adapter> modelSwitch =
    new ReactionLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseReactionModel(ReactionModel object)
      {
        return createReactionModelAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseAgent(Agent object)
      {
        return createAgentAdapter();
      }
      @Override
      public Adapter caseAgentDeclaration(AgentDeclaration object)
      {
        return createAgentDeclarationAdapter();
      }
      @Override
      public Adapter caseAgentInstance(AgentInstance object)
      {
        return createAgentInstanceAdapter();
      }
      @Override
      public Adapter caseSite(Site object)
      {
        return createSiteAdapter();
      }
      @Override
      public Adapter caseSiteState(SiteState object)
      {
        return createSiteStateAdapter();
      }
      @Override
      public Adapter caseComplex(Complex object)
      {
        return createComplexAdapter();
      }
      @Override
      public Adapter caseComplexElement(ComplexElement object)
      {
        return createComplexElementAdapter();
      }
      @Override
      public Adapter caseSignature(Signature object)
      {
        return createSignatureAdapter();
      }
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter caseRuleHead(RuleHead object)
      {
        return createRuleHeadAdapter();
      }
      @Override
      public Adapter caseRuleBody(RuleBody object)
      {
        return createRuleBodyAdapter();
      }
      @Override
      public Adapter caseRates(Rates object)
      {
        return createRatesAdapter();
      }
      @Override
      public Adapter casePattern(Pattern object)
      {
        return createPatternAdapter();
      }
      @Override
      public Adapter caseBonds(Bonds object)
      {
        return createBondsAdapter();
      }
      @Override
      public Adapter caseAbstractAgent(AbstractAgent object)
      {
        return createAbstractAgentAdapter();
      }
      @Override
      public Adapter caseBond(Bond object)
      {
        return createBondAdapter();
      }
      @Override
      public Adapter caseBondSideOrWildcard(BondSideOrWildcard object)
      {
        return createBondSideOrWildcardAdapter();
      }
      @Override
      public Adapter caseWildcard(Wildcard object)
      {
        return createWildcardAdapter();
      }
      @Override
      public Adapter caseBondSide(BondSide object)
      {
        return createBondSideAdapter();
      }
      @Override
      public Adapter caseSiteInstance(SiteInstance object)
      {
        return createSiteInstanceAdapter();
      }
      @Override
      public Adapter caseSiteInstanceState(SiteInstanceState object)
      {
        return createSiteInstanceStateAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseInitialisation(Initialisation object)
      {
        return createInitialisationAdapter();
      }
      @Override
      public Adapter caseInitialisationHead(InitialisationHead object)
      {
        return createInitialisationHeadAdapter();
      }
      @Override
      public Adapter caseInitialisationBody(InitialisationBody object)
      {
        return createInitialisationBodyAdapter();
      }
      @Override
      public Adapter caseObservable(Observable object)
      {
        return createObservableAdapter();
      }
      @Override
      public Adapter caseObservableBody(ObservableBody object)
      {
        return createObservableBodyAdapter();
      }
      @Override
      public Adapter caseObservableArithmetic(ObservableArithmetic object)
      {
        return createObservableArithmeticAdapter();
      }
      @Override
      public Adapter caseObservablePattern(ObservablePattern object)
      {
        return createObservablePatternAdapter();
      }
      @Override
      public Adapter caseCommand(Command object)
      {
        return createCommandAdapter();
      }
      @Override
      public Adapter caseTerminateCommand(TerminateCommand object)
      {
        return createTerminateCommandAdapter();
      }
      @Override
      public Adapter caseTerminateBody(TerminateBody object)
      {
        return createTerminateBodyAdapter();
      }
      @Override
      public Adapter caseTerminateTime(TerminateTime object)
      {
        return createTerminateTimeAdapter();
      }
      @Override
      public Adapter caseTerminateIterations(TerminateIterations object)
      {
        return createTerminateIterationsAdapter();
      }
      @Override
      public Adapter caseTerminateCount(TerminateCount object)
      {
        return createTerminateCountAdapter();
      }
      @Override
      public Adapter caseArithmeticExpr(ArithmeticExpr object)
      {
        return createArithmeticExprAdapter();
      }
      @Override
      public Adapter caseBlankPattern(BlankPattern object)
      {
        return createBlankPatternAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMulti(Multi object)
      {
        return createMultiAdapter();
      }
      @Override
      public Adapter caseDiv(Div object)
      {
        return createDivAdapter();
      }
      @Override
      public Adapter casePow(Pow object)
      {
        return createPowAdapter();
      }
      @Override
      public Adapter caseNumberLiteral(NumberLiteral object)
      {
        return createNumberLiteralAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseVarRef(VarRef object)
      {
        return createVarRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.ReactionModel <em>Reaction Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.ReactionModel
   * @generated
   */
  public Adapter createReactionModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Agent <em>Agent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Agent
   * @generated
   */
  public Adapter createAgentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.AgentDeclaration <em>Agent Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.AgentDeclaration
   * @generated
   */
  public Adapter createAgentDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.AgentInstance <em>Agent Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.AgentInstance
   * @generated
   */
  public Adapter createAgentInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Site <em>Site</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Site
   * @generated
   */
  public Adapter createSiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.SiteState <em>Site State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.SiteState
   * @generated
   */
  public Adapter createSiteStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Complex <em>Complex</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Complex
   * @generated
   */
  public Adapter createComplexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.ComplexElement <em>Complex Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.ComplexElement
   * @generated
   */
  public Adapter createComplexElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Signature <em>Signature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Signature
   * @generated
   */
  public Adapter createSignatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.RuleHead <em>Rule Head</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.RuleHead
   * @generated
   */
  public Adapter createRuleHeadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.RuleBody <em>Rule Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.RuleBody
   * @generated
   */
  public Adapter createRuleBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Rates <em>Rates</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Rates
   * @generated
   */
  public Adapter createRatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Pattern <em>Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Pattern
   * @generated
   */
  public Adapter createPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Bonds <em>Bonds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Bonds
   * @generated
   */
  public Adapter createBondsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.AbstractAgent <em>Abstract Agent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.AbstractAgent
   * @generated
   */
  public Adapter createAbstractAgentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Bond <em>Bond</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Bond
   * @generated
   */
  public Adapter createBondAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.BondSideOrWildcard <em>Bond Side Or Wildcard</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.BondSideOrWildcard
   * @generated
   */
  public Adapter createBondSideOrWildcardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Wildcard <em>Wildcard</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Wildcard
   * @generated
   */
  public Adapter createWildcardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.BondSide <em>Bond Side</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.BondSide
   * @generated
   */
  public Adapter createBondSideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.SiteInstance <em>Site Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.SiteInstance
   * @generated
   */
  public Adapter createSiteInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.SiteInstanceState <em>Site Instance State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.SiteInstanceState
   * @generated
   */
  public Adapter createSiteInstanceStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Initialisation <em>Initialisation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Initialisation
   * @generated
   */
  public Adapter createInitialisationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.InitialisationHead <em>Initialisation Head</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.InitialisationHead
   * @generated
   */
  public Adapter createInitialisationHeadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.InitialisationBody <em>Initialisation Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.InitialisationBody
   * @generated
   */
  public Adapter createInitialisationBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Observable <em>Observable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Observable
   * @generated
   */
  public Adapter createObservableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.ObservableBody <em>Observable Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.ObservableBody
   * @generated
   */
  public Adapter createObservableBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.ObservableArithmetic <em>Observable Arithmetic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.ObservableArithmetic
   * @generated
   */
  public Adapter createObservableArithmeticAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.ObservablePattern <em>Observable Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.ObservablePattern
   * @generated
   */
  public Adapter createObservablePatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Command <em>Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Command
   * @generated
   */
  public Adapter createCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.TerminateCommand <em>Terminate Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.TerminateCommand
   * @generated
   */
  public Adapter createTerminateCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.TerminateBody <em>Terminate Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.TerminateBody
   * @generated
   */
  public Adapter createTerminateBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.TerminateTime <em>Terminate Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.TerminateTime
   * @generated
   */
  public Adapter createTerminateTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.TerminateIterations <em>Terminate Iterations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.TerminateIterations
   * @generated
   */
  public Adapter createTerminateIterationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.TerminateCount <em>Terminate Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.TerminateCount
   * @generated
   */
  public Adapter createTerminateCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.ArithmeticExpr <em>Arithmetic Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.ArithmeticExpr
   * @generated
   */
  public Adapter createArithmeticExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.BlankPattern <em>Blank Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.BlankPattern
   * @generated
   */
  public Adapter createBlankPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Multi <em>Multi</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Multi
   * @generated
   */
  public Adapter createMultiAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Div <em>Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Div
   * @generated
   */
  public Adapter createDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.Pow <em>Pow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.Pow
   * @generated
   */
  public Adapter createPowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.NumberLiteral <em>Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.NumberLiteral
   * @generated
   */
  public Adapter createNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.reaction.dsl.reactionLanguage.VarRef <em>Var Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.reaction.dsl.reactionLanguage.VarRef
   * @generated
   */
  public Adapter createVarRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ReactionLanguageAdapterFactory
