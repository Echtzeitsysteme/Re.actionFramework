grammar org.reaction.dsl.ReactionLanguage with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate reactionLanguage "http://www.reaction.org/dsl/ReactionLanguage"

ReactionModel:
	(elements+=Component SL_COMMENT? (NEWLINE elements+=Component)*)*;

Component:
	AgentDeclaration | Rule | Complex | Initialisation | Observable | Variable | Command;

Agent:
	name=ID (':' sites+=Site (',' sites+=Site)*)?;

AgentDeclaration:
	'agent' declaredAgents+=Agent (';' declaredAgents+=Agent)*;

AgentInstance:
	name=ID ':' instanceOf=[Agent] (array?='[' size=INT ']')?;

Site:
	name=ID ('(' states+=SiteState (',' states+=SiteState)* ')')?;

SiteState:
	name=ID;

Complex:
	'complex' signature=Signature '{'
	(elements+=ComplexElement)*
	'}';

ComplexElement:
	Complex | Rule | Variable | Observable;

Signature:
	'(' instances+=AgentInstance (',' instances+=AgentInstance)* ')';

Rule:
	'rule' head=RuleHead body=RuleBody;

RuleHead:
	name=ID (signature=Signature)? ':';

RuleBody:
	lhs=Pattern ruleType=RuleType rhs=Pattern rates=Rates;

Rates:
	'@' rateForward=ArithmeticExpr (rateBackwardSet?=',' rateBackward=ArithmeticExpr)?;

Pattern:
	{BlankPattern} '_' | Bonds;

Bonds:
	bonds+=Bond (',' bonds+=Bond)*;

AbstractAgent:
	Agent | AgentInstance;

Bond:
	left=BondSide (bondType=BondType right=BondSideOrWildcard)?;

BondSideOrWildcard:
	BondSide | wildcard=Wildcard
;

Wildcard:
	anything?=ANYTHING | nothing?=NULL
;

BondSide:
	abstractAgent=[AbstractAgent] (array?='[' index=UnsignedInt ']')? ('.' siteInstance=SiteInstance)?;

SiteInstance:
	site=[Site] (siteState=SiteInstanceState)?;

SiteInstanceState:
	'(' state=[SiteState] ')';

Variable:
	'var' name=ID '=' value=ArithmeticExpr;

	//Needs to be that way for recursive resolve of arithmetic expression
Initialisation:
	head=InitialisationHead body=InitialisationBody;

InitialisationHead:
	'init' cnt=ArithmeticExpr;

InitialisationBody:
	(signature=Signature)?':' pattern=Pattern;

Observable:
	'observe' name=ID  body=ObservableBody; 
	
ObservableBody:
	ObservablePattern // | ObservableArithmetic
;

ObservableArithmetic:
	':' expr=ArithmeticExpr
;

//TODO: Introduce observableHead
ObservablePattern:
	(signature=Signature)?':' pattern=Pattern
;

Command:
	TerminateCommand
;

TerminateCommand:
	'terminate' TerminateBody
;

TerminateBody:
	TerminateTime | TerminateIterations | TerminateCount
;

TerminateTime:
	'time' '=' time=ArithmeticExpr		
;

TerminateIterations:
	'iterations' '=' iterations=ArithmeticExpr		
;

TerminateCount:
	(signature=Signature ':')? pattern=Pattern 'matches' '=' cnt=ArithmeticExpr		
;

	//-------------------------------------------Arithmetic Part from here on-------------------------------------------
ArithmeticExpr:
	Addition;

Addition returns ArithmeticExpr:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;

Multiplication returns ArithmeticExpr:
	PrimaryExpr (({Multi.left=current} '*' | {Div.left=current} '/' | {Pow.left=current} '^') right=PrimaryExpr)*;

PrimaryExpr returns ArithmeticExpr:
	'(' ArithmeticExpr ')' | {NumberLiteral} value=ArithmeticType | {FunctionCall} func=MathFunc '(' expr=ArithmeticExpr ')' | {VarRef}
	ref=[Variable];

enum MathFunc:
	SQRT='sqrt' | ABS='abs';

//	ArithmeticType:
//	UNSIGNED_INT | SIGNED_INT | UNSIGNED_DOUBLE | SIGNED_DOUBLE | UNSIGNED_SCIENTIFIC_DOUBLE | SIGNED_SCIENTIFIC_DOUBLE
//;
//terminal UNSIGNED_INT returns ecore::EInt:
//	('0'..'9')+
//;
//terminal SIGNED_INT returns ecore::EInt:
//	'-' ('0'..'9')+
//;
//
//terminal UNSIGNED_DOUBLE returns ecore::EDouble:
//	('0'..'9')*'.'('0'..'9')+
//;
//
//terminal SIGNED_DOUBLE returns ecore::EDouble:
//	'-' ('0'..'9')*'.'('0'..'9')+
//;
//
//terminal UNSIGNED_SCIENTIFIC_DOUBLE returns ecore::EDouble:
//	('0'..'9')+('.'('0'..'9')+)?'E'('0'..'9')+
//;
//
//terminal SIGNED_SCIENTIFIC_DOUBLE returns ecore::EDouble:
//	'-'('0'..'9')+('.'('0'..'9')+)?'E'('0'..'9')+
//;

ArithmeticType returns ecore::EDouble:
	UnsignedInt | SignedInt | UnsignedDouble | SignedDouble | UnsignedScientificDouble | SignedScientificDouble;

SignedScientificDouble returns ecore::EDouble:
	'-' (INT|NULL) ('.' (INT|NULL))? 'E' ('+' | '-')? INT;

	
UnsignedScientificDouble returns ecore::EDouble: //TODO Fix error for missing exponent operator
	(INT|NULL) ('.'  (INT|NULL))? 'E' ('+' | '-')? INT;

UnsignedInt returns ecore::EInt:
	INT|NULL;

SignedInt returns ecore::EInt:
	'-' (INT|NULL);

UnsignedDouble returns ecore::EDouble:
	 (INT|NULL) '.'  (INT|NULL);

SignedDouble returns ecore::EDouble:
	'-'  (INT|NULL) '.'  (INT|NULL);

enum RuleType:
	UNI='=>' | BI='<=>';

enum BondType:
	UNBOUND='//' | BOUND='+';

terminal ANYTHING:
	'?'
;

terminal NULL:
	'0'
;

@Override
terminal SL_COMMENT:
	'#' !('\n' | '\r')* ('\r'? '\n')?;

terminal NEWLINE:
	'\n';
