import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/GeneralTestSimSG/model/TestcasesModel.ecore"
import "platform:/resource/reactionContainer/model/reactionContainer.ecore"

rule simpleBinding() {
	a: A {
		-- -A_b -> x
	}

	x: X {
		-- -X_z -> a
		-- -X_z_p -> ps
		++ -X_z_u -> us
	}

	us: U_s

	ps: P_s
}

rule simpleBindingBwd() {
	a: A {
		-- -A_b -> x
	}

	x: X {
		-- -X_z -> a
		-- -X_z_p -> ps
		++ -X_z_u -> us
	}

	us: U_s

	ps: P_s
}
when abxzFree

condition abxzFree = forbid abBound && forbid xzBound

pattern abBound() {
	a: A {
		-A_b -> agent
	}

	agent: Agent
}

pattern acBound() {
	a: A {
		-A_c -> agent
	}

	agent: Agent
}

rule selfBinding() {
	a: A {
		-- -A_b -> a
		-- -A_c -> a
		-- -A_c_p -> ps
		++ -A_c_u -> us
	}

	ps: P_s

	us: U_s
}
when xFree

condition xFree = forbid xyBound && forbid xzBound

pattern xyBound() {
	x: X {
		-X_y -> agent
	}

	agent: Agent
}

pattern xzBound() {
	x: X {
		-X_z -> agent
	}

	agent: Agent
}

rule selfBindingBwd() {
	a: A {
		-- -A_c_u -> us
		++ -A_c_p -> ps
		++ -A_b -> a
		++ -A_c -> a
	}

	x: X {
		-- -X_y -> x
		-- -X_z -> x
	}

	ps: P_s

	us: U_s
}
when aFree

condition aFree = forbid abBound && forbid acBound

rule synthDegComplete() {
	++ a: A {
		++ -A_c -> x
		++ -A_c_p -> ps
	}

	++x: X {
		++ -X_z -> a
		++ -X_z_u -> us
	}

	us: U_s

	ps: P_s
}

rule synthDegCompleteBwd() {
	-- a: A {
		-- -A_c -> x
		-- -A_c_p -> ps
	}

	--x: X {
		-- -X_z -> a
		-- -X_z_u -> us
	}

	us: U_s

	ps: P_s
}

rule underspec() {
	a: A {
		-- -A_c -> _loc
		-- -A_c_p -> ps
		++ -A_c_u -> us
	}

	_loc: Agent

	ps: P_s

	us: U_s
}

rule unspecified() {
	a: A

	++ x: X {
		++ -X_z_u -> us
	}

	us: U_s
}

rule generic() {
	a: A {
		-- -A_c -> _x
	}

	_x: X {
		-- -X_z -> a
	}
}

rule genericWithState() {
	a: A {
		-- -A_c -> _x
	}

	_x: X {
		-- -X_z -> a
		-X_z_p -> ps
	}

	ps: P_s
}
